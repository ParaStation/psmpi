template:
    #include <stdio.h>
    #include <stdlib.h>
    #include <ctype.h>
    #include <string.h>
    #include <stdbool.h>

    #define MAX_SZ 100
    int map[MAX_SZ];

    #define MPL_SUCCESS 0
    #define MPL_ERR_FAIL 1

    [src/mpl/src/mpl_rankmap.c:MPL_rankmap_str_to_array]

    int main(int argc, char **argv)
    {
        int sz = atoi(argv[1]);
        char *mapping = argv[2];

        if (sz > MAX_SZ) {
            printf("sz exceeds limit (%d > %d)\n", sz, MAX_SZ);
            return 1;
        }

        int err = MPL_rankmap_str_to_array(mapping, sz, map);
        
        if (err) {
            printf("err = 0x%x\n", err);
            return 1;
        }

        for (int i = 0; i < sz; i++) {
            printf("%d ", map[i]);
        }
        printf("\n");

        return 0;
    }

TESTS:
    cmd: ./t 4 '(vector,1,2,3,0)'
    expect: 1 2 3 0

    cmd: ./t 12 '(vector,(0,3,4))'
    expect: 0 0 0 0 1 1 1 1 2 2 2 2

    cmd: ./t 12 '(vector,[(0,3,1)]x4)'
    expect: 0 1 2 0 1 2 0 1 2 0 1 2

    cmd: ./t 12 '(vector,[(0,3,1)]x3,(0,3,1))'
    expect: 0 1 2 0 1 2 0 1 2 0 1 2

    cmd: ./t 12 '(vector,[(0,2,1),2]x3,(0,3,1))'
    expect: 0 1 2 0 1 2 0 1 2 0 1 2

    # legacy with default repeats from node 0

    cmd: ./t 12 '(vector,(1,3,1),(0,4,1))'
    expect: 1 2 3 0 1 2 3 0 1 2 3 0

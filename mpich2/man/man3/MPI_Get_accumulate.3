.TH MPI_Get_accumulate 3 "11/12/2019" " " "MPI"
.SH NAME
MPI_Get_accumulate \-  Perform an atomic, one-sided read-and-accumulate operation. 
.SH SYNOPSIS
.nf
int MPI_Get_accumulate(const void *origin_addr, int origin_count,
MPI_Datatype origin_datatype, void *result_addr, int result_count,
MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp,
int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win)
.fi

Accumulate origin_count elements of type origin_datatype from the origin buffer
(origin_addr) to the buffer at offset target_disp, in the target window
specified by target_rank and win, using the operation op and return in the
result buffer result_addr the content of the target buffer before the
accumulation.

.SH INPUT PARAMETERS
.PD 0
.TP
.B origin_addr 
- initial address of buffer (choice)
.PD 1
.PD 0
.TP
.B origin_count 
- number of entries in buffer (nonnegative integer)
.PD 1
.PD 0
.TP
.B origin_datatype 
- datatype of each buffer entry (handle)
.PD 1
.PD 0
.TP
.B result_addr 
- initial address of result buffer (choice)
.PD 1
.PD 0
.TP
.B result_count 
- number of entries in result buffer (non-negative integer)
.PD 1
.PD 0
.TP
.B result_datatype 
- datatype of each entry in result buffer (handle)
.PD 1
.PD 0
.TP
.B target_rank 
- rank of target (nonnegative integer)
.PD 1
.PD 0
.TP
.B target_disp 
- displacement from start of window to beginning of target
buffer (nonnegative integer)
.PD 1
.PD 0
.TP
.B target_count 
- number of entries in target buffer (nonnegative integer)
.PD 1
.PD 0
.TP
.B target_datatype 
- datatype of each entry in target buffer (handle)
.PD 1
.PD 0
.TP
.B op 
- predefined reduce operation (handle)
.PD 1
.PD 0
.TP
.B win 
- window object (handle)
.PD 1

.SH NOTES
This operations is atomic with respect to other "accumulate" operations.

The get and accumulate steps are executed atomically for each basic element in
the datatype (see MPI 3.0 Section 11.7 for details). The predefined operation
.I MPI_REPLACE
provides fetch-and-set behavior.

The origin and result buffers (origin_addr and result_addr) must be disjoint.
Each datatype argument must be a predefined datatype or a derived datatype
where all basic components are of the same predefined datatype. All datatype
arguments must be constructed from the same predefined datatype. The
operation op applies to elements of that predefined type. target_datatype must
not specify overlapping entries, and the target buffer must fit in the target
window or in attached memory in a dynamic window.

Any of the predefined operations for 
.I MPI_Reduce
, as well as 
.I MPI_NO_OP
or
.I MPI_REPLACE
can be specified as op. User-defined functions cannot be used. A
new predefined operation, 
.I MPI_NO_OP
, is defined. It corresponds to the
associative function f (a, b) = a; i.e., the current value in the target memory
is returned in the result buffer at the origin and no operation is performed on
the target buffer. 
.I MPI_NO_OP
can be used only in 
.I MPI_Get_accumulate
,
.I MPI_Rget_accumulate
, and 
.I MPI_Fetch_and_op
\&.
.I MPI_NO_OP
cannot be used in
.I MPI_Accumulate
, 
.I MPI_Raccumulate
, or collective reduction operations, such as
.I MPI_Reduce
and others.

.SH NOTES FOR FORTRAN
All MPI routines in Fortran (except for 
.I MPI_WTIME
and 
.I MPI_WTICK
) have
an additional argument 
.I ierr
at the end of the argument list.  
.I ierr
is an integer and has the same meaning as the return value of the routine
in C.  In Fortran, MPI routines are subroutines, and are invoked with the
.I call
statement.

All MPI objects (e.g., 
.I MPI_Datatype
, 
.I MPI_Comm
) are of type 
.I INTEGER
in Fortran.

.SH ERRORS

All MPI routines (except 
.I MPI_Wtime
and 
.I MPI_Wtick
) return an error value;
C routines as the value of the function and Fortran routines in the last
argument.  Before the value is returned, the current MPI error handler is
called.  By default, this error handler aborts the MPI job.  The error handler
may be changed with 
.I MPI_Comm_set_errhandler
(for communicators),
.I MPI_File_set_errhandler
(for files), and 
.I MPI_Win_set_errhandler
(for
RMA windows).  The MPI-1 routine 
.I MPI_Errhandler_set
may be used but
its use is deprecated.  The predefined error handler
.I MPI_ERRORS_RETURN
may be used to cause error values to be returned.
Note that MPI does 
.B not
guarentee that an MPI program can continue past
an error; however, MPI implementations will attempt to continue whenever
possible.

.PD 0
.TP
.B MPI_SUCCESS 
- No error; MPI routine completed successfully.
.PD 1
.PD 0
.TP
.B MPI_ERR_ARG 
- Invalid argument.  Some argument is invalid and is not
identified by a specific error class (e.g., 
.I MPI_ERR_RANK
).
.PD 1
.PD 0
.TP
.B MPI_ERR_COUNT 
- Invalid count argument.  Count arguments must be 
non-negative; a count of zero is often valid.
.PD 1
.PD 0
.TP
.B MPI_ERR_RANK 
- Invalid source or destination rank.  Ranks must be between
zero and the size of the communicator minus one; ranks in a receive
(
.I MPI_Recv
, 
.I MPI_Irecv
, 
.I MPI_Sendrecv
, etc.) may also be 
.I MPI_ANY_SOURCE
\&.

.PD 1
.PD 0
.TP
.B MPI_ERR_TYPE 
- Invalid datatype argument.  Additionally, this error can
occur if an uncommitted MPI_Datatype (see 
.I MPI_Type_commit
) is used
in a communication call.
.PD 1
.PD 0
.TP
.B MPI_ERR_WIN 
- Invalid MPI window object
.PD 1

.SH SEE ALSO
MPI_Rget_accumulate MPI_Fetch_and_op
.br

/*
 * Copyright (C) by Argonne National Laboratory
 *     See COPYRIGHT in top-level directory
 *
 * This file is automatically generated by buildiface 
 * DO NOT EDIT
 */
/* Prototypes for Fortran Interface Functions */

extern FORT_DLL_SPEC void FORT_CALL mpi_send_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_send_);
extern FORT_DLL_SPEC void FORT_CALL mpi_recv_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_recv_);
extern FORT_DLL_SPEC void FORT_CALL mpi_get_count_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_get_count_);
extern FORT_DLL_SPEC void FORT_CALL mpi_bsend_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_bsend_);
extern FORT_DLL_SPEC void FORT_CALL mpi_ssend_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_ssend_);
extern FORT_DLL_SPEC void FORT_CALL mpi_rsend_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_rsend_);
extern FORT_DLL_SPEC void FORT_CALL mpi_buffer_attach_ ( void*v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_buffer_attach_);
extern FORT_DLL_SPEC void FORT_CALL mpi_buffer_detach_ ( void*v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_buffer_detach_);
extern FORT_DLL_SPEC void FORT_CALL mpi_isend_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_isend_);
extern FORT_DLL_SPEC void FORT_CALL mpi_ibsend_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_ibsend_);
extern FORT_DLL_SPEC void FORT_CALL mpi_issend_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_issend_);
extern FORT_DLL_SPEC void FORT_CALL mpi_irsend_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_irsend_);
extern FORT_DLL_SPEC void FORT_CALL mpi_irecv_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_irecv_);
extern FORT_DLL_SPEC void FORT_CALL mpi_wait_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_wait_);
extern FORT_DLL_SPEC void FORT_CALL mpi_test_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_test_);
extern FORT_DLL_SPEC void FORT_CALL mpi_request_free_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_request_free_);
extern FORT_DLL_SPEC void FORT_CALL mpi_waitany_ ( MPI_Fint *v1, MPI_Fint v2[], MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_waitany_);
extern FORT_DLL_SPEC void FORT_CALL mpi_testany_ ( MPI_Fint *v1, MPI_Fint v2[], MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_testany_);
extern FORT_DLL_SPEC void FORT_CALL mpi_waitall_ ( MPI_Fint *v1, MPI_Fint v2[], MPI_Fint v3[], MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_waitall_);
extern FORT_DLL_SPEC void FORT_CALL mpi_testall_ ( MPI_Fint *v1, MPI_Fint v2[], MPI_Fint *v3, MPI_Fint v4[], MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_testall_);
extern FORT_DLL_SPEC void FORT_CALL mpi_waitsome_ ( MPI_Fint *v1, MPI_Fint v2[], MPI_Fint *v3, MPI_Fint v4[], MPI_Fint v5[], MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_waitsome_);
extern FORT_DLL_SPEC void FORT_CALL mpi_testsome_ ( MPI_Fint *v1, MPI_Fint v2[], MPI_Fint *v3, MPI_Fint v4[], MPI_Fint v5[], MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_testsome_);
extern FORT_DLL_SPEC void FORT_CALL mpi_iprobe_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_iprobe_);
extern FORT_DLL_SPEC void FORT_CALL mpi_probe_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_probe_);
extern FORT_DLL_SPEC void FORT_CALL mpi_cancel_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_cancel_);
extern FORT_DLL_SPEC void FORT_CALL mpi_test_cancelled_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_test_cancelled_);
extern FORT_DLL_SPEC void FORT_CALL mpi_send_init_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_send_init_);
extern FORT_DLL_SPEC void FORT_CALL mpi_bsend_init_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_bsend_init_);
extern FORT_DLL_SPEC void FORT_CALL mpi_ssend_init_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_ssend_init_);
extern FORT_DLL_SPEC void FORT_CALL mpi_rsend_init_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_rsend_init_);
extern FORT_DLL_SPEC void FORT_CALL mpi_recv_init_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_recv_init_);
extern FORT_DLL_SPEC void FORT_CALL mpi_start_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_start_);
extern FORT_DLL_SPEC void FORT_CALL mpi_startall_ ( MPI_Fint *v1, MPI_Fint v2[], MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_startall_);
extern FORT_DLL_SPEC void FORT_CALL mpi_sendrecv_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, void*v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *v10, MPI_Fint *v11, MPI_Fint *v12, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_sendrecv_);
extern FORT_DLL_SPEC void FORT_CALL mpi_sendrecv_replace_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_sendrecv_replace_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_contiguous_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_contiguous_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_vector_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_vector_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_hvector_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint * v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_hvector_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_indexed_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_indexed_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_hindexed_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint * v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_hindexed_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_struct_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint * v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_struct_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_extent_ ( MPI_Fint *v1, MPI_Fint * v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_extent_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_size_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_size_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_lb_ ( MPI_Fint *v1, MPI_Fint * v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_lb_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_ub_ ( MPI_Fint *v1, MPI_Fint * v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_ub_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_commit_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_commit_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_free_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_free_);
extern FORT_DLL_SPEC void FORT_CALL mpi_get_elements_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_get_elements_);
extern FORT_DLL_SPEC void FORT_CALL mpi_pack_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_pack_);
extern FORT_DLL_SPEC void FORT_CALL mpi_unpack_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_unpack_);
extern FORT_DLL_SPEC void FORT_CALL mpi_pack_size_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_pack_size_);
extern FORT_DLL_SPEC void FORT_CALL mpi_barrier_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_barrier_);
extern FORT_DLL_SPEC void FORT_CALL mpi_bcast_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_bcast_);
extern FORT_DLL_SPEC void FORT_CALL mpi_gather_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_gather_);
extern FORT_DLL_SPEC void FORT_CALL mpi_gatherv_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_gatherv_);
extern FORT_DLL_SPEC void FORT_CALL mpi_scatter_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_scatter_);
extern FORT_DLL_SPEC void FORT_CALL mpi_scatterv_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, void*v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_scatterv_);
extern FORT_DLL_SPEC void FORT_CALL mpi_allgather_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_allgather_);
extern FORT_DLL_SPEC void FORT_CALL mpi_allgatherv_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_allgatherv_);
extern FORT_DLL_SPEC void FORT_CALL mpi_alltoall_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_alltoall_);
extern FORT_DLL_SPEC void FORT_CALL mpi_alltoallv_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, void*v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_alltoallv_);
extern FORT_DLL_SPEC void FORT_CALL mpi_alltoallw_ ( void*v1, MPI_Fint v2[], MPI_Fint v3[], MPI_Fint v4[], void*v5, MPI_Fint v6[], MPI_Fint v7[], MPI_Fint v8[], MPI_Fint *v9, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_alltoallw_);
extern FORT_DLL_SPEC void FORT_CALL mpi_exscan_ ( void*v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_exscan_);
extern FORT_DLL_SPEC void FORT_CALL mpi_reduce_ ( void*v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_reduce_);
extern FORT_DLL_SPEC void FORT_CALL mpi_op_create_ ( MPI_User_function*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_op_create_);
extern FORT_DLL_SPEC void FORT_CALL mpi_op_free_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_op_free_);
extern FORT_DLL_SPEC void FORT_CALL mpi_allreduce_ ( void*v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_allreduce_);
extern FORT_DLL_SPEC void FORT_CALL mpi_reduce_scatter_ ( void*v1, void*v2, MPI_Fint v3[], MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_reduce_scatter_);
extern FORT_DLL_SPEC void FORT_CALL mpi_scan_ ( void*v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_scan_);
extern FORT_DLL_SPEC void FORT_CALL mpi_group_size_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_group_size_);
extern FORT_DLL_SPEC void FORT_CALL mpi_group_rank_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_group_rank_);
extern FORT_DLL_SPEC void FORT_CALL mpi_group_translate_ranks_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint v3[], MPI_Fint *v4, MPI_Fint v5[], MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_group_translate_ranks_);
extern FORT_DLL_SPEC void FORT_CALL mpi_group_compare_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_group_compare_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_group_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_group_);
extern FORT_DLL_SPEC void FORT_CALL mpi_group_union_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_group_union_);
extern FORT_DLL_SPEC void FORT_CALL mpi_group_intersection_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_group_intersection_);
extern FORT_DLL_SPEC void FORT_CALL mpi_group_difference_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_group_difference_);
extern FORT_DLL_SPEC void FORT_CALL mpi_group_incl_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint v3[], MPI_Fint *v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_group_incl_);
extern FORT_DLL_SPEC void FORT_CALL mpi_group_excl_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint v3[], MPI_Fint *v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_group_excl_);
extern FORT_DLL_SPEC void FORT_CALL mpi_group_range_incl_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint v3[], MPI_Fint *v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_group_range_incl_);
extern FORT_DLL_SPEC void FORT_CALL mpi_group_range_excl_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint v3[], MPI_Fint *v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_group_range_excl_);
extern FORT_DLL_SPEC void FORT_CALL mpi_group_free_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_group_free_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_size_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_size_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_rank_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_rank_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_compare_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_compare_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_dup_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_dup_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_dup_with_info_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_dup_with_info_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_create_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_create_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_split_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_split_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_free_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_free_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_test_inter_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_test_inter_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_remote_size_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_remote_size_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_remote_group_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_remote_group_);
extern FORT_DLL_SPEC void FORT_CALL mpi_intercomm_create_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_intercomm_create_);
extern FORT_DLL_SPEC void FORT_CALL mpi_intercomm_merge_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_intercomm_merge_);
extern FORT_DLL_SPEC void FORT_CALL mpi_keyval_free_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_keyval_free_);
extern FORT_DLL_SPEC void FORT_CALL mpi_attr_put_ ( MPI_Fint *v1, MPI_Fint *v2, void*v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_attr_put_);
extern FORT_DLL_SPEC void FORT_CALL mpi_attr_get_ ( MPI_Fint *v1, MPI_Fint *v2, void*v3, MPI_Fint *v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_attr_get_);
extern FORT_DLL_SPEC void FORT_CALL mpi_attr_delete_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_attr_delete_);
extern FORT_DLL_SPEC void FORT_CALL mpi_topo_test_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_topo_test_);
extern FORT_DLL_SPEC void FORT_CALL mpi_cart_create_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint v3[], MPI_Fint v4[], MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_cart_create_);
extern FORT_DLL_SPEC void FORT_CALL mpi_dims_create_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint v3[], MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_dims_create_);
extern FORT_DLL_SPEC void FORT_CALL mpi_graph_create_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint v3[], MPI_Fint v4[], MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_graph_create_);
extern FORT_DLL_SPEC void FORT_CALL mpi_graphdims_get_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_graphdims_get_);
extern FORT_DLL_SPEC void FORT_CALL mpi_graph_get_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint v4[], MPI_Fint v5[], MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_graph_get_);
extern FORT_DLL_SPEC void FORT_CALL mpi_cartdim_get_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_cartdim_get_);
extern FORT_DLL_SPEC void FORT_CALL mpi_cart_get_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint v3[], MPI_Fint v4[], MPI_Fint v5[], MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_cart_get_);
extern FORT_DLL_SPEC void FORT_CALL mpi_cart_rank_ ( MPI_Fint *v1, MPI_Fint v2[], MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_cart_rank_);
extern FORT_DLL_SPEC void FORT_CALL mpi_cart_coords_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint v4[], MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_cart_coords_);
extern FORT_DLL_SPEC void FORT_CALL mpi_graph_neighbors_count_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_graph_neighbors_count_);
extern FORT_DLL_SPEC void FORT_CALL mpi_graph_neighbors_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint v4[], MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_graph_neighbors_);
extern FORT_DLL_SPEC void FORT_CALL mpi_cart_shift_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_cart_shift_);
extern FORT_DLL_SPEC void FORT_CALL mpi_cart_sub_ ( MPI_Fint *v1, MPI_Fint v2[], MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_cart_sub_);
extern FORT_DLL_SPEC void FORT_CALL mpi_cart_map_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint v3[], MPI_Fint v4[], MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_cart_map_);
extern FORT_DLL_SPEC void FORT_CALL mpi_graph_map_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint v3[], MPI_Fint v4[], MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_graph_map_);
extern FORT_DLL_SPEC void FORT_CALL mpi_get_processor_name_ ( char *v1 FORT_MIXED_LEN(d1), MPI_Fint *v2, MPI_Fint *ierr FORT_END_LEN(d1) ) FUNC_ATTRIBUTES(mpi_get_processor_name_);
extern FORT_DLL_SPEC void FORT_CALL mpi_get_version_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_get_version_);
extern FORT_DLL_SPEC void FORT_CALL mpi_get_library_version_ ( char *v1 FORT_MIXED_LEN(d1), MPI_Fint *v2, MPI_Fint *ierr FORT_END_LEN(d1) ) FUNC_ATTRIBUTES(mpi_get_library_version_);
extern FORT_DLL_SPEC void FORT_CALL mpi_errhandler_create_ ( MPI_Handler_function*v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_errhandler_create_);
extern FORT_DLL_SPEC void FORT_CALL mpi_errhandler_set_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_errhandler_set_);
extern FORT_DLL_SPEC void FORT_CALL mpi_errhandler_get_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_errhandler_get_);
extern FORT_DLL_SPEC void FORT_CALL mpi_errhandler_free_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_errhandler_free_);
extern FORT_DLL_SPEC void FORT_CALL mpi_error_string_ ( MPI_Fint *v1, char *v2 FORT_MIXED_LEN(d2), MPI_Fint *v3, MPI_Fint *ierr FORT_END_LEN(d2) ) FUNC_ATTRIBUTES(mpi_error_string_);
extern FORT_DLL_SPEC void FORT_CALL mpi_error_class_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_error_class_);
extern FORT_DLL_SPEC void FORT_CALL mpi_finalize_ ( MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_finalize_);
extern FORT_DLL_SPEC void FORT_CALL mpi_initialized_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_initialized_);
extern FORT_DLL_SPEC void FORT_CALL mpi_abort_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_abort_);
extern FORT_DLL_SPEC void FORT_CALL mpi_close_port_ ( char *v1 FORT_MIXED_LEN(d1), MPI_Fint *ierr FORT_END_LEN(d1) ) FUNC_ATTRIBUTES(mpi_close_port_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_accept_ ( char *v1 FORT_MIXED_LEN(d1), MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr FORT_END_LEN(d1) ) FUNC_ATTRIBUTES(mpi_comm_accept_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_connect_ ( char *v1 FORT_MIXED_LEN(d1), MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr FORT_END_LEN(d1) ) FUNC_ATTRIBUTES(mpi_comm_connect_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_disconnect_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_disconnect_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_get_parent_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_get_parent_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_join_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_join_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_spawn_ ( char *v1 FORT_MIXED_LEN(d1), char *v2 FORT_MIXED_LEN(d2), MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint v8[], MPI_Fint *ierr FORT_END_LEN(d1) FORT_END_LEN(d2) ) FUNC_ATTRIBUTES(mpi_comm_spawn_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_spawn_multiple_ ( MPI_Fint *v1, char *v2 FORT_MIXED_LEN(d2), char *v3 FORT_MIXED_LEN(d3), MPI_Fint v4[], MPI_Fint v5[], MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint v9[], MPI_Fint *ierr FORT_END_LEN(d2) FORT_END_LEN(d3) ) FUNC_ATTRIBUTES(mpi_comm_spawn_multiple_);
extern FORT_DLL_SPEC void FORT_CALL mpi_lookup_name_ ( char *v1 FORT_MIXED_LEN(d1), MPI_Fint *v2, char *v3 FORT_MIXED_LEN(d3), MPI_Fint *ierr FORT_END_LEN(d1) FORT_END_LEN(d3) ) FUNC_ATTRIBUTES(mpi_lookup_name_);
extern FORT_DLL_SPEC void FORT_CALL mpi_open_port_ ( MPI_Fint *v1, char *v2 FORT_MIXED_LEN(d2), MPI_Fint *ierr FORT_END_LEN(d2) ) FUNC_ATTRIBUTES(mpi_open_port_);
extern FORT_DLL_SPEC void FORT_CALL mpi_publish_name_ ( char *v1 FORT_MIXED_LEN(d1), MPI_Fint *v2, char *v3 FORT_MIXED_LEN(d3), MPI_Fint *ierr FORT_END_LEN(d1) FORT_END_LEN(d3) ) FUNC_ATTRIBUTES(mpi_publish_name_);
extern FORT_DLL_SPEC void FORT_CALL mpi_unpublish_name_ ( char *v1 FORT_MIXED_LEN(d1), MPI_Fint *v2, char *v3 FORT_MIXED_LEN(d3), MPI_Fint *ierr FORT_END_LEN(d1) FORT_END_LEN(d3) ) FUNC_ATTRIBUTES(mpi_unpublish_name_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_set_info_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_set_info_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_get_info_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_get_info_);
extern FORT_DLL_SPEC void FORT_CALL mpi_accumulate_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Aint * v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_accumulate_);
extern FORT_DLL_SPEC void FORT_CALL mpi_get_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Aint * v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_get_);
extern FORT_DLL_SPEC void FORT_CALL mpi_put_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Aint * v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_put_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_complete_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_complete_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_create_ ( void*v1, MPI_Aint * v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_create_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_fence_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_fence_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_free_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_free_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_get_group_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_get_group_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_lock_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_lock_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_post_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_post_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_start_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_start_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_test_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_test_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_unlock_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_unlock_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_wait_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_wait_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_allocate_ ( MPI_Aint * v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, void*v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_allocate_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_allocate_shared_ ( MPI_Aint * v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, void*v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_allocate_shared_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_shared_query_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Aint * v3, MPI_Fint *v4, void*v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_shared_query_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_create_dynamic_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_create_dynamic_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_attach_ ( MPI_Fint *v1, void*v2, MPI_Aint * v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_attach_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_detach_ ( MPI_Fint *v1, void*v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_detach_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_get_info_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_get_info_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_set_info_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_set_info_);
extern FORT_DLL_SPEC void FORT_CALL mpi_get_accumulate_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Aint * v8, MPI_Fint *v9, MPI_Fint *v10, MPI_Fint *v11, MPI_Fint *v12, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_get_accumulate_);
extern FORT_DLL_SPEC void FORT_CALL mpi_fetch_and_op_ ( void*v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Aint * v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_fetch_and_op_);
extern FORT_DLL_SPEC void FORT_CALL mpi_compare_and_swap_ ( void*v1, void*v2, void*v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Aint * v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_compare_and_swap_);
extern FORT_DLL_SPEC void FORT_CALL mpi_rput_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Aint * v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_rput_);
extern FORT_DLL_SPEC void FORT_CALL mpi_rget_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Aint * v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_rget_);
extern FORT_DLL_SPEC void FORT_CALL mpi_raccumulate_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Aint * v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *v10, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_raccumulate_);
extern FORT_DLL_SPEC void FORT_CALL mpi_rget_accumulate_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Aint * v8, MPI_Fint *v9, MPI_Fint *v10, MPI_Fint *v11, MPI_Fint *v12, MPI_Fint *v13, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_rget_accumulate_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_lock_all_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_lock_all_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_unlock_all_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_unlock_all_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_flush_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_flush_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_flush_all_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_flush_all_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_flush_local_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_flush_local_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_flush_local_all_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_flush_local_all_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_sync_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_sync_);
extern FORT_DLL_SPEC void FORT_CALL mpi_add_error_class_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_add_error_class_);
extern FORT_DLL_SPEC void FORT_CALL mpi_add_error_code_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_add_error_code_);
extern FORT_DLL_SPEC void FORT_CALL mpi_add_error_string_ ( MPI_Fint *v1, char *v2 FORT_MIXED_LEN(d2), MPI_Fint *ierr FORT_END_LEN(d2) ) FUNC_ATTRIBUTES(mpi_add_error_string_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_call_errhandler_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_call_errhandler_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_create_keyval_ ( MPI_Comm_copy_attr_function*v1, MPI_Comm_delete_attr_function*v2, MPI_Fint *v3, void*v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_create_keyval_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_delete_attr_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_delete_attr_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_free_keyval_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_free_keyval_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_get_attr_ ( MPI_Fint *v1, MPI_Fint *v2, void*v3, MPI_Fint *v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_get_attr_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_get_name_ ( MPI_Fint *v1, char *v2 FORT_MIXED_LEN(d2), MPI_Fint *v3, MPI_Fint *ierr FORT_END_LEN(d2) ) FUNC_ATTRIBUTES(mpi_comm_get_name_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_set_attr_ ( MPI_Fint *v1, MPI_Fint *v2, void*v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_set_attr_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_set_name_ ( MPI_Fint *v1, char *v2 FORT_MIXED_LEN(d2), MPI_Fint *ierr FORT_END_LEN(d2) ) FUNC_ATTRIBUTES(mpi_comm_set_name_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_call_errhandler_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_call_errhandler_);
extern FORT_DLL_SPEC void FORT_CALL mpi_grequest_complete_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_grequest_complete_);
extern FORT_DLL_SPEC void FORT_CALL mpi_grequest_start_ ( MPI_Grequest_query_function*v1, MPI_Grequest_free_function*v2, MPI_Grequest_cancel_function*v3, void*v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_grequest_start_);
extern FORT_DLL_SPEC void FORT_CALL mpi_is_thread_main_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_is_thread_main_);
extern FORT_DLL_SPEC void FORT_CALL mpi_query_thread_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_query_thread_);
extern FORT_DLL_SPEC void FORT_CALL mpi_status_set_cancelled_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_status_set_cancelled_);
extern FORT_DLL_SPEC void FORT_CALL mpi_status_set_elements_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_status_set_elements_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_create_keyval_ ( MPI_Type_copy_attr_function*v1, MPI_Type_delete_attr_function*v2, MPI_Fint *v3, void*v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_create_keyval_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_delete_attr_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_delete_attr_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_dup_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_dup_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_free_keyval_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_free_keyval_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_get_attr_ ( MPI_Fint *v1, MPI_Fint *v2, void*v3, MPI_Fint *v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_get_attr_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_get_contents_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint v5[], MPI_Aint * v6, MPI_Fint v7[], MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_get_contents_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_get_envelope_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_get_envelope_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_get_name_ ( MPI_Fint *v1, char *v2 FORT_MIXED_LEN(d2), MPI_Fint *v3, MPI_Fint *ierr FORT_END_LEN(d2) ) FUNC_ATTRIBUTES(mpi_type_get_name_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_set_attr_ ( MPI_Fint *v1, MPI_Fint *v2, void*v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_set_attr_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_set_name_ ( MPI_Fint *v1, char *v2 FORT_MIXED_LEN(d2), MPI_Fint *ierr FORT_END_LEN(d2) ) FUNC_ATTRIBUTES(mpi_type_set_name_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_match_size_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_match_size_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_call_errhandler_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_call_errhandler_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_create_keyval_ ( MPI_Win_copy_attr_function*v1, MPI_Win_delete_attr_function*v2, MPI_Fint *v3, void*v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_create_keyval_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_delete_attr_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_delete_attr_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_free_keyval_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_free_keyval_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_get_attr_ ( MPI_Fint *v1, MPI_Fint *v2, void*v3, MPI_Fint *v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_get_attr_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_get_name_ ( MPI_Fint *v1, char *v2 FORT_MIXED_LEN(d2), MPI_Fint *v3, MPI_Fint *ierr FORT_END_LEN(d2) ) FUNC_ATTRIBUTES(mpi_win_get_name_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_set_attr_ ( MPI_Fint *v1, MPI_Fint *v2, void*v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_set_attr_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_set_name_ ( MPI_Fint *v1, char *v2 FORT_MIXED_LEN(d2), MPI_Fint *ierr FORT_END_LEN(d2) ) FUNC_ATTRIBUTES(mpi_win_set_name_);
extern FORT_DLL_SPEC void FORT_CALL mpi_alloc_mem_ ( MPI_Aint * v1, MPI_Fint *v2, void*v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_alloc_mem_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_create_errhandler_ ( MPI_Comm_errhandler_function*v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_create_errhandler_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_get_errhandler_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_get_errhandler_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_set_errhandler_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_set_errhandler_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_create_errhandler_ ( MPI_File_errhandler_function*v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_create_errhandler_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_get_errhandler_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_get_errhandler_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_set_errhandler_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_set_errhandler_);
extern FORT_DLL_SPEC void FORT_CALL mpi_finalized_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_finalized_);
extern FORT_DLL_SPEC void FORT_CALL mpi_free_mem_ ( void*v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_free_mem_);
extern FORT_DLL_SPEC void FORT_CALL mpi_info_create_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_info_create_);
extern FORT_DLL_SPEC void FORT_CALL mpi_info_delete_ ( MPI_Fint *v1, char *v2 FORT_MIXED_LEN(d2), MPI_Fint *ierr FORT_END_LEN(d2) ) FUNC_ATTRIBUTES(mpi_info_delete_);
extern FORT_DLL_SPEC void FORT_CALL mpi_info_dup_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_info_dup_);
extern FORT_DLL_SPEC void FORT_CALL mpi_info_free_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_info_free_);
extern FORT_DLL_SPEC void FORT_CALL mpi_info_get_ ( MPI_Fint *v1, char *v2 FORT_MIXED_LEN(d2), MPI_Fint *v3, char *v4 FORT_MIXED_LEN(d4), MPI_Fint *v5, MPI_Fint *ierr FORT_END_LEN(d2) FORT_END_LEN(d4) ) FUNC_ATTRIBUTES(mpi_info_get_);
extern FORT_DLL_SPEC void FORT_CALL mpi_info_get_nkeys_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_info_get_nkeys_);
extern FORT_DLL_SPEC void FORT_CALL mpi_info_get_nthkey_ ( MPI_Fint *v1, MPI_Fint *v2, char *v3 FORT_MIXED_LEN(d3), MPI_Fint *ierr FORT_END_LEN(d3) ) FUNC_ATTRIBUTES(mpi_info_get_nthkey_);
extern FORT_DLL_SPEC void FORT_CALL mpi_info_get_valuelen_ ( MPI_Fint *v1, char *v2 FORT_MIXED_LEN(d2), MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *ierr FORT_END_LEN(d2) ) FUNC_ATTRIBUTES(mpi_info_get_valuelen_);
extern FORT_DLL_SPEC void FORT_CALL mpi_info_set_ ( MPI_Fint *v1, char *v2 FORT_MIXED_LEN(d2), char *v3 FORT_MIXED_LEN(d3), MPI_Fint *ierr FORT_END_LEN(d2) FORT_END_LEN(d3) ) FUNC_ATTRIBUTES(mpi_info_set_);
extern FORT_DLL_SPEC void FORT_CALL mpi_pack_external_ ( char *v1 FORT_MIXED_LEN(d1), void*v2, MPI_Fint *v3, MPI_Fint *v4, void*v5, MPI_Aint * v6, MPI_Aint * v7, MPI_Fint *ierr FORT_END_LEN(d1) ) FUNC_ATTRIBUTES(mpi_pack_external_);
extern FORT_DLL_SPEC void FORT_CALL mpi_pack_external_size_ ( char *v1 FORT_MIXED_LEN(d1), MPI_Fint *v2, MPI_Fint *v3, MPI_Aint * v4, MPI_Fint *ierr FORT_END_LEN(d1) ) FUNC_ATTRIBUTES(mpi_pack_external_size_);
extern FORT_DLL_SPEC void FORT_CALL mpi_request_get_status_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_request_get_status_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_create_darray_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint v4[], MPI_Fint v5[], MPI_Fint v6[], MPI_Fint v7[], MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *v10, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_create_darray_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_create_hindexed_ ( MPI_Fint *v1, MPI_Fint v2[], MPI_Aint * v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_create_hindexed_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_create_hvector_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Aint * v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_create_hvector_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_create_indexed_block_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint v3[], MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_create_indexed_block_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_create_hindexed_block_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Aint v3[], MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_create_hindexed_block_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_create_resized_ ( MPI_Fint *v1, MPI_Aint * v2, MPI_Aint * v3, MPI_Fint *v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_create_resized_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_create_struct_ ( MPI_Fint *v1, MPI_Fint v2[], MPI_Aint * v3, MPI_Fint v4[], MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_create_struct_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_create_subarray_ ( MPI_Fint *v1, MPI_Fint v2[], MPI_Fint v3[], MPI_Fint v4[], MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_create_subarray_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_get_extent_ ( MPI_Fint *v1, MPI_Aint * v2, MPI_Aint * v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_get_extent_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_get_true_extent_ ( MPI_Fint *v1, MPI_Aint * v2, MPI_Aint * v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_get_true_extent_);
extern FORT_DLL_SPEC void FORT_CALL mpi_unpack_external_ ( char *v1 FORT_MIXED_LEN(d1), void*v2, MPI_Aint * v3, MPI_Aint * v4, void*v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr FORT_END_LEN(d1) ) FUNC_ATTRIBUTES(mpi_unpack_external_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_create_errhandler_ ( MPI_Win_errhandler_function*v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_create_errhandler_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_get_errhandler_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_get_errhandler_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_set_errhandler_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_win_set_errhandler_);
extern FORT_DLL_SPEC void FORT_CALL mpi_reduce_local_ ( void*v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_reduce_local_);
extern FORT_DLL_SPEC void FORT_CALL mpi_op_commutative_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_op_commutative_);
extern FORT_DLL_SPEC void FORT_CALL mpi_reduce_scatter_block_ ( void*v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_reduce_scatter_block_);
extern FORT_DLL_SPEC void FORT_CALL mpi_dist_graph_create_adjacent_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint v3[], MPI_Fint v4[], MPI_Fint *v5, MPI_Fint v6[], MPI_Fint v7[], MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *v10, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_dist_graph_create_adjacent_);
extern FORT_DLL_SPEC void FORT_CALL mpi_dist_graph_create_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint v3[], MPI_Fint v4[], MPI_Fint v5[], MPI_Fint v6[], MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_dist_graph_create_);
extern FORT_DLL_SPEC void FORT_CALL mpi_dist_graph_neighbors_count_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_dist_graph_neighbors_count_);
extern FORT_DLL_SPEC void FORT_CALL mpi_dist_graph_neighbors_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint v3[], MPI_Fint v4[], MPI_Fint *v5, MPI_Fint v6[], MPI_Fint v7[], MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_dist_graph_neighbors_);
extern FORT_DLL_SPEC void FORT_CALL mpi_improbe_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_improbe_);
extern FORT_DLL_SPEC void FORT_CALL mpi_imrecv_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_imrecv_);
extern FORT_DLL_SPEC void FORT_CALL mpi_mprobe_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_mprobe_);
extern FORT_DLL_SPEC void FORT_CALL mpi_mrecv_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_mrecv_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_idup_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_idup_);
extern FORT_DLL_SPEC void FORT_CALL mpi_ibarrier_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_ibarrier_);
extern FORT_DLL_SPEC void FORT_CALL mpi_ibcast_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_ibcast_);
extern FORT_DLL_SPEC void FORT_CALL mpi_igather_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_igather_);
extern FORT_DLL_SPEC void FORT_CALL mpi_igatherv_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint v5[], MPI_Fint v6[], MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *v10, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_igatherv_);
extern FORT_DLL_SPEC void FORT_CALL mpi_iscatter_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_iscatter_);
extern FORT_DLL_SPEC void FORT_CALL mpi_iscatterv_ ( void*v1, MPI_Fint v2[], MPI_Fint v3[], MPI_Fint *v4, void*v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *v10, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_iscatterv_);
extern FORT_DLL_SPEC void FORT_CALL mpi_iallgather_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_iallgather_);
extern FORT_DLL_SPEC void FORT_CALL mpi_iallgatherv_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint v5[], MPI_Fint v6[], MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_iallgatherv_);
extern FORT_DLL_SPEC void FORT_CALL mpi_ialltoall_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_ialltoall_);
extern FORT_DLL_SPEC void FORT_CALL mpi_ialltoallv_ ( void*v1, MPI_Fint v2[], MPI_Fint v3[], MPI_Fint *v4, void*v5, MPI_Fint v6[], MPI_Fint v7[], MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *v10, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_ialltoallv_);
extern FORT_DLL_SPEC void FORT_CALL mpi_ialltoallw_ ( void*v1, MPI_Fint v2[], MPI_Fint v3[], MPI_Fint v4[], void*v5, MPI_Fint v6[], MPI_Fint v7[], MPI_Fint v8[], MPI_Fint *v9, MPI_Fint *v10, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_ialltoallw_);
extern FORT_DLL_SPEC void FORT_CALL mpi_ireduce_ ( void*v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_ireduce_);
extern FORT_DLL_SPEC void FORT_CALL mpi_iallreduce_ ( void*v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_iallreduce_);
extern FORT_DLL_SPEC void FORT_CALL mpi_ireduce_scatter_ ( void*v1, void*v2, MPI_Fint v3[], MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_ireduce_scatter_);
extern FORT_DLL_SPEC void FORT_CALL mpi_ireduce_scatter_block_ ( void*v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_ireduce_scatter_block_);
extern FORT_DLL_SPEC void FORT_CALL mpi_iscan_ ( void*v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_iscan_);
extern FORT_DLL_SPEC void FORT_CALL mpi_iexscan_ ( void*v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_iexscan_);
extern FORT_DLL_SPEC void FORT_CALL mpi_ineighbor_allgather_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_ineighbor_allgather_);
extern FORT_DLL_SPEC void FORT_CALL mpi_ineighbor_allgatherv_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint v5[], MPI_Fint v6[], MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_ineighbor_allgatherv_);
extern FORT_DLL_SPEC void FORT_CALL mpi_ineighbor_alltoall_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_ineighbor_alltoall_);
extern FORT_DLL_SPEC void FORT_CALL mpi_ineighbor_alltoallv_ ( void*v1, MPI_Fint v2[], MPI_Fint v3[], MPI_Fint *v4, void*v5, MPI_Fint v6[], MPI_Fint v7[], MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *v10, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_ineighbor_alltoallv_);
extern FORT_DLL_SPEC void FORT_CALL mpi_ineighbor_alltoallw_ ( void*v1, MPI_Fint v2[], MPI_Aint v3[], MPI_Fint v4[], void*v5, MPI_Fint v6[], MPI_Aint v7[], MPI_Fint v8[], MPI_Fint *v9, MPI_Fint *v10, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_ineighbor_alltoallw_);
extern FORT_DLL_SPEC void FORT_CALL mpi_neighbor_allgather_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_neighbor_allgather_);
extern FORT_DLL_SPEC void FORT_CALL mpi_neighbor_allgatherv_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint v5[], MPI_Fint v6[], MPI_Fint *v7, MPI_Fint *v8, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_neighbor_allgatherv_);
extern FORT_DLL_SPEC void FORT_CALL mpi_neighbor_alltoall_ ( void*v1, MPI_Fint *v2, MPI_Fint *v3, void*v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *v7, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_neighbor_alltoall_);
extern FORT_DLL_SPEC void FORT_CALL mpi_neighbor_alltoallv_ ( void*v1, MPI_Fint v2[], MPI_Fint v3[], MPI_Fint *v4, void*v5, MPI_Fint v6[], MPI_Fint v7[], MPI_Fint *v8, MPI_Fint *v9, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_neighbor_alltoallv_);
extern FORT_DLL_SPEC void FORT_CALL mpi_neighbor_alltoallw_ ( void*v1, MPI_Fint v2[], MPI_Aint v3[], MPI_Fint v4[], void*v5, MPI_Fint v6[], MPI_Aint v7[], MPI_Fint v8[], MPI_Fint *v9, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_neighbor_alltoallw_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_split_type_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_split_type_);
extern FORT_DLL_SPEC void FORT_CALL mpi_get_elements_x_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Count *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_get_elements_x_);
extern FORT_DLL_SPEC void FORT_CALL mpi_status_set_elements_x_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Count *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_status_set_elements_x_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_get_extent_x_ ( MPI_Fint *v1, MPI_Count *v2, MPI_Count *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_get_extent_x_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_get_true_extent_x_ ( MPI_Fint *v1, MPI_Count *v2, MPI_Count *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_get_true_extent_x_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_size_x_ ( MPI_Fint *v1, MPI_Count *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_type_size_x_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_create_group_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_comm_create_group_);
extern FORT_DLL_SPEC void FORT_CALL mpix_comm_failure_ack_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpix_comm_failure_ack_);
extern FORT_DLL_SPEC void FORT_CALL mpix_comm_failure_get_acked_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpix_comm_failure_get_acked_);
extern FORT_DLL_SPEC void FORT_CALL mpix_comm_revoke_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpix_comm_revoke_);
extern FORT_DLL_SPEC void FORT_CALL mpix_comm_shrink_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpix_comm_shrink_);
extern FORT_DLL_SPEC void FORT_CALL mpix_comm_agree_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpix_comm_agree_);
extern FORT_DLL_SPEC void FORT_CALL mpix_query_cuda_support_ ( MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpix_query_cuda_support_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_open_ ( MPI_Fint *v1, char *v2 FORT_MIXED_LEN(d2), MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr FORT_END_LEN(d2) ) FUNC_ATTRIBUTES(mpi_file_open_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_close_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_close_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_delete_ ( char *v1 FORT_MIXED_LEN(d1), MPI_Fint *v2, MPI_Fint *ierr FORT_END_LEN(d1) ) FUNC_ATTRIBUTES(mpi_file_delete_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_set_size_ ( MPI_Fint *v1, MPI_Offset *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_set_size_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_preallocate_ ( MPI_Fint *v1, MPI_Offset *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_preallocate_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_get_size_ ( MPI_Fint *v1, MPI_Offset*v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_get_size_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_get_group_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_get_group_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_get_amode_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_get_amode_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_set_info_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_set_info_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_get_info_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_get_info_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_set_view_ ( MPI_Fint *v1, MPI_Offset *v2, MPI_Fint *v3, MPI_Fint *v4, char *v5 FORT_MIXED_LEN(d5), MPI_Fint *v6, MPI_Fint *ierr FORT_END_LEN(d5) ) FUNC_ATTRIBUTES(mpi_file_set_view_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_get_view_ ( MPI_Fint *v1, MPI_Offset*v2, MPI_Fint *v3, MPI_Fint *v4, char *v5 FORT_MIXED_LEN(d5), MPI_Fint *ierr FORT_END_LEN(d5) ) FUNC_ATTRIBUTES(mpi_file_get_view_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_read_at_ ( MPI_Fint *v1, MPI_Offset *v2, void*v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_read_at_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_read_at_all_ ( MPI_Fint *v1, MPI_Offset *v2, void*v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_read_at_all_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_write_at_ ( MPI_Fint *v1, MPI_Offset *v2, void*v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_write_at_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_write_at_all_ ( MPI_Fint *v1, MPI_Offset *v2, void*v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_write_at_all_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_iread_at_ ( MPI_Fint *v1, MPI_Offset *v2, void*v3, MPI_Fint *v4, MPI_Fint *v5, MPIO_Request*v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_iread_at_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_iwrite_at_ ( MPI_Fint *v1, MPI_Offset *v2, void*v3, MPI_Fint *v4, MPI_Fint *v5, MPIO_Request*v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_iwrite_at_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_read_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_read_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_read_all_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_read_all_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_write_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_write_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_write_all_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_write_all_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_iread_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPIO_Request*v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_iread_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_iwrite_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPIO_Request*v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_iwrite_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_seek_ ( MPI_Fint *v1, MPI_Offset *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_seek_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_get_position_ ( MPI_Fint *v1, MPI_Offset*v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_get_position_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_get_byte_offset_ ( MPI_Fint *v1, MPI_Offset *v2, MPI_Offset*v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_get_byte_offset_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_read_shared_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_read_shared_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_write_shared_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_write_shared_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_iread_shared_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPIO_Request*v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_iread_shared_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_iwrite_shared_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPIO_Request*v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_iwrite_shared_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_read_ordered_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_read_ordered_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_write_ordered_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_write_ordered_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_seek_shared_ ( MPI_Fint *v1, MPI_Offset *v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_seek_shared_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_get_position_shared_ ( MPI_Fint *v1, MPI_Offset*v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_get_position_shared_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_read_at_all_begin_ ( MPI_Fint *v1, MPI_Offset *v2, void*v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_read_at_all_begin_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_read_at_all_end_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_read_at_all_end_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_write_at_all_begin_ ( MPI_Fint *v1, MPI_Offset *v2, void*v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_write_at_all_begin_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_write_at_all_end_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_write_at_all_end_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_read_all_begin_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_read_all_begin_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_read_all_end_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_read_all_end_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_write_all_begin_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_write_all_begin_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_write_all_end_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_write_all_end_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_read_ordered_begin_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_read_ordered_begin_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_read_ordered_end_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_read_ordered_end_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_write_ordered_begin_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_write_ordered_begin_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_write_ordered_end_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_write_ordered_end_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_get_type_extent_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_FAint * v3, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_get_type_extent_);
extern FORT_DLL_SPEC void FORT_CALL mpi_register_datarep_ ( char *v1 FORT_MIXED_LEN(d1), MPI_Datarep_conversion_function*v2, MPI_Datarep_conversion_function*v3, MPI_Datarep_extent_function*v4, void*v5, MPI_Fint *ierr FORT_END_LEN(d1) ) FUNC_ATTRIBUTES(mpi_register_datarep_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_set_atomicity_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_set_atomicity_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_get_atomicity_ ( MPI_Fint *v1, MPI_Fint *v2, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_get_atomicity_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_sync_ ( MPI_Fint *v1, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_sync_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_iread_at_all_ ( MPI_Fint *v1, MPI_Offset *v2, void*v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_iread_at_all_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_iwrite_at_all_ ( MPI_Fint *v1, MPI_Offset *v2, void*v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *v6, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_iwrite_at_all_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_iread_all_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_iread_all_);
extern FORT_DLL_SPEC void FORT_CALL mpi_file_iwrite_all_ ( MPI_Fint *v1, void*v2, MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr ) FUNC_ATTRIBUTES(mpi_file_iwrite_all_);
extern FORT_DLL_SPEC void FORT_CALL mpi_init_ ( MPI_Fint * ) FUNC_ATTRIBUTES(mpi_init_);
extern FORT_DLL_SPEC void FORT_CALL mpi_init_thread_ ( MPI_Fint *, MPI_Fint *, MPI_Fint * ) FUNC_ATTRIBUTES(mpi_init_thread_);
extern FORT_DLL_SPEC void FORT_CALL mpi_pcontrol_ ( MPI_Fint * ) FUNC_ATTRIBUTES(mpi_pcontrol_);
extern FORT_DLL_SPEC void FORT_CALL mpi_address_ ( void*, MPI_Fint *, MPI_Fint * ) FUNC_ATTRIBUTES(mpi_address_);
extern FORT_DLL_SPEC void FORT_CALL mpi_get_address_ ( void*, MPI_Aint *, MPI_Fint * ) FUNC_ATTRIBUTES(mpi_get_address_);
extern FORT_DLL_SPEC double FORT_CALL mpi_wtime_ ( void ) FUNC_ATTRIBUTES(mpi_wtime_);
extern FORT_DLL_SPEC double FORT_CALL mpi_wtick_ ( void ) FUNC_ATTRIBUTES(mpi_wtick_);
extern FORT_DLL_SPEC MPI_Aint FORT_CALL mpi_aint_add_ ( MPI_Aint *, MPI_Aint * ) FUNC_ATTRIBUTES(mpi_aint_add_);
extern FORT_DLL_SPEC MPI_Aint FORT_CALL mpi_aint_diff_ ( MPI_Aint *, MPI_Aint * ) FUNC_ATTRIBUTES(mpi_aint_diff_);
extern FORT_DLL_SPEC void FORT_CALL mpi_keyval_create_ ( MPI_Copy_function, MPI_Delete_function, MPI_Fint *, void*, MPI_Fint * ) FUNC_ATTRIBUTES(mpi_keyval_create_);
extern FORT_DLL_SPEC void FORT_CALL mpi_dup_fn_ ( MPI_Fint*, MPI_Fint*, void*, void**, void**, MPI_Fint*, MPI_Fint * ) FUNC_ATTRIBUTES(mpi_dup_fn_);
extern FORT_DLL_SPEC void FORT_CALL mpi_null_delete_fn_ ( MPI_Fint*, MPI_Fint*, void*, void*, MPI_Fint * ) FUNC_ATTRIBUTES(mpi_null_delete_fn_);
extern FORT_DLL_SPEC void FORT_CALL mpi_null_copy_fn_ ( MPI_Fint*, MPI_Fint*, void*, void*, void*, MPI_Fint *, MPI_Fint * ) FUNC_ATTRIBUTES(mpi_null_copy_fn_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_dup_fn_ ( MPI_Fint*, MPI_Fint*, void*, MPI_Aint *, MPI_Aint *, MPI_Fint*, MPI_Fint * ) FUNC_ATTRIBUTES(mpi_comm_dup_fn_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_null_delete_fn_ ( MPI_Fint*, MPI_Fint*, MPI_Aint *, MPI_Aint *, MPI_Fint * ) FUNC_ATTRIBUTES(mpi_comm_null_delete_fn_);
extern FORT_DLL_SPEC void FORT_CALL mpi_comm_null_copy_fn_ ( MPI_Fint*, MPI_Fint*, MPI_Aint *, MPI_Aint *, MPI_Aint *, MPI_Fint *, MPI_Fint * ) FUNC_ATTRIBUTES(mpi_comm_null_copy_fn_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_dup_fn_ ( MPI_Fint*, MPI_Fint*, void*, MPI_Aint *, MPI_Aint *, MPI_Fint*, MPI_Fint * ) FUNC_ATTRIBUTES(mpi_win_dup_fn_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_null_delete_fn_ ( MPI_Fint*, MPI_Fint*, MPI_Aint *, MPI_Aint *, MPI_Fint * ) FUNC_ATTRIBUTES(mpi_win_null_delete_fn_);
extern FORT_DLL_SPEC void FORT_CALL mpi_win_null_copy_fn_ ( MPI_Fint*, MPI_Fint*, MPI_Aint *, MPI_Aint *, MPI_Aint *, MPI_Fint *, MPI_Fint * ) FUNC_ATTRIBUTES(mpi_win_null_copy_fn_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_dup_fn_ ( MPI_Fint*, MPI_Fint*, void*, MPI_Aint *, MPI_Aint *, MPI_Fint*, MPI_Fint * ) FUNC_ATTRIBUTES(mpi_type_dup_fn_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_null_delete_fn_ ( MPI_Fint*, MPI_Fint*, MPI_Aint *, MPI_Aint *, MPI_Fint * ) FUNC_ATTRIBUTES(mpi_type_null_delete_fn_);
extern FORT_DLL_SPEC void FORT_CALL mpi_type_null_copy_fn_ ( MPI_Fint*, MPI_Fint*, MPI_Aint *, MPI_Aint *, MPI_Aint *, MPI_Fint *, MPI_Fint * ) FUNC_ATTRIBUTES(mpi_type_null_copy_fn_);

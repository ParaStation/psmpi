# vim: set ft=c:

MPI_Info_create:
    .desc: Creates a new info object
    .skip: initcheck
{
    MPIR_Info *info_ptr = NULL;
    mpi_errno = MPIR_Info_alloc(&info_ptr);
    MPIR_ERR_CHECK(mpi_errno);

    *info = info_ptr->handle;
    /* (info_ptr)->cookie = MPIR_INFO_COOKIE; */
    /* this is the first structure in this linked list. it is
     * always kept empty. new (key,value) pairs are added after it. */
}

MPI_Info_delete:
    .desc: Deletes a (key,value) pair from info
    .skip: initcheck
    .extra: NotThreadSafe

MPI_Info_dup:
    .desc: Returns a duplicate of the info object
    .skip: initcheck

MPI_Info_free:
    .desc: Frees an info object
    .skip: initcheck

MPI_Info_get:
    .desc: Retrieves the value associated with a key
    .skip: initcheck
/*
.N Deprecated
   'MPI_Info_get_string' should be used instead of this routine.
*/

MPI_Info_get_nkeys:
    .desc: Returns the number of currently defined keys in info
    .skip: initcheck

MPI_Info_get_nthkey:
    .desc: Returns the nth defined key in info
    .skip: initcheck

MPI_Info_get_valuelen:
    .desc: Retrieves the length of the value associated with a key
    .skip: initcheck
/*
.N Deprecated
   'MPI_Info_get_string' should be used instead of this routine.
*/

MPI_Info_set:
    .desc: Adds a (key,value) pair to info
    .skip: initcheck
    .docnotes: NotThreadSafe
{ -- error_check --
    MPIR_ERR_CHKANDJUMP((strlen(value) > MPI_MAX_INFO_VAL), mpi_errno, MPI_ERR_INFO_VALUE,
                        "**infovallong");
}

MPI_Info_get_string:
    .desc: Retrieves the value associated with a key
    .skip: initcheck
{ -- error_check -- value
    if (*buflen > 0) {
        MPIR_ERRTEST_ARGNULL(value, "value", mpi_errno);
    }
}

MPI_Info_create_env:
    .desc: Creates an info object containing information about the application
    .skip: initcheck, validate-ARGUMENT_COUNT, validate-ARGUMENT_LIST
/*
    Notes for C:
        'MPI_Info_create_env' accepts NULL as input parameters. Doing so impacts
        the returned value.

    Notes for Fortran:
        The Fortran binding for 'MPI_Info_create_env' does not take argc and argv.
        .vb
            subroutine MPI_INFO_CREATE_ENV(info, ierr)
            integer info, ierr
        .ve
*/

MPIX_Info_set_hex:
    info: INFO, direction=in, [info object]
    key: STRING, constant=True, [key]
    value: BUFFER, constant=True, [value]
    value_size: INFO_VALUE_LENGTH, [size of value]

MPIX_Info_merge_from_array:
    .desc: Merge multiple info objects from an array into a new info object
    .seealso: MPIX_Info_split_into_array
    count: ARRAY_LENGTH_PI, [number of info objects in array]
    array_of_info: INFO, length=count, [array of info objects]
    newinfo: INFO, direction=out, [info object]
/*
    Notes:
        The resulting info object newinfo holds key/value pairs for all keys that
        occur in the info objects in array_of_info. There is no ordering of the keys
        in newinfo guaranteed.

        If a key only occurs in one of the info objects in array_of_info, then the
        value of this key in newinfo corresponds exactly to the source value.

        If identical keys occur in multiple info objects in array_of_info, then the
        value for the key in newinfo is set to the string "mpix_info_array_type" and
        the possibly different values are stored internally but are no longer visible
        to the application.

        The string "mpix_info_array_type" is a reserved value and shall not be used by
        the application when calling MPI_INFO_SET, However, it can be used after
        MPI_INFO_GET_STRING to check whether a key refers to a single value or to an
        array of values. When overwriting a value containing this string the array
        property of the key is lost.
*/

MPIX_Info_split_into_array:
    .desc: Split all key/value pairs with value "mpix_info_array_type" into single info objects
    .seealso: MPIX_Info_merge_from_array
    count: ARRAY_LENGTH_NNI, direction=inout, [number of info objects in array]
    array_of_info: INFO, length=count, direction=inout, [array of info objects]
    info: INFO, [info object]
/*
    Notes:
        All values "mpix_info_array_type" contained in info are split and provided
        as separate info objects in array_of_info.

        Values in info that are different from "mpix_info_array_type" are copied
        together with their keys into all info objects in array_of_info.

        The number (count) of info objects in the array is allowed to be smaller
        or larger than the actual number required to include all array values of
        all keys. The minimum number required to include all array values of all
        keys is provided in count.

        If the required number of info objects for array_of_info is not known, a call
        of this procedure with count equal to 0 can be used to first retrieve this
        value. Based on this value, a suitable array_of_info can be created and
        passed to the procedure afterwards.
*/

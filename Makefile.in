###################################################### -*- Makefile -*- #####
#                  ParaStation
#        Copyright (c) 2002-2004 ParTec AG, Karlsruhe
#        Copyright (c) 2005-2020 Cluster Competence Center GmbH, Munich
#        Copyright (c) 2021-2022 ParTec AG, Munich
#############################################################################
#
# $Id$
#
#############################################################################

SRCDIR := $(shell cd @srcdir@;pwd)
TOP_BUILDDIR:=@TOP_BUILDDIR@
CONFSET:=@CONFSET@
CUDA_SUPPORT:=@CUDA_SUPPORT@
export TOP_SRCDIR = $(SRCDIR)
export CONFIGARGS:=@CONFIGARGS@
exec_prefix=@exec_prefix@
prefix=@prefix@
libdir=@libdir@
MODULEFILE=@MODULEFILE@
MPICCCONFDIR=$(DESTDIR)@MPICCCONFDIR@
ENABLE_HYDRA=@ENABLE_HYDRA@
MPICH_VERSION=@MPICH_VERSION@
MPICH_RELEASE_DATE=@MPICH_RELEASE_DATE@
EXTRA_VERSION_INFO="@EXTRA_VERSION_INFO@"
PSCOM_LD_LIBRARY_PATH=@PSCOM_LD_LIBRARY_PATH@
all:

SUBDIRS += dist

ifneq ($(CONFSET),none)
SUBDIRS += mpich2
all: mpich2_all

ENABLE_CUDA_SWITCH=--enable-cuda ## Add some tests for CUDA awareness
DISABLE_CUDA_SWITCH=--without-cuda ## Disable CUDA for test suite configure
ifeq ($(CUDA_SUPPORT),true)
CUDA_TESTS = $(ENABLE_CUDA_SWITCH)
else
CUDA_TESTS = $(DISABLE_CUDA_SWITCH)
endif
ifdef TESTCUDA
_TESTCUDA = $(TESTCUDA)
ifeq ($(TESTCUDA),yes)
CUDA_TESTS = $(ENABLE_CUDA_SWITCH)
else
ifeq ($(TESTCUDA),no)
CUDA_TESTS = $(DISABLE_CUDA_SWITCH)
else
_TESTCUDA = unknown
endif
endif
endif

ifeq ($(ENABLE_HYDRA),false)
MPIEXEC=/opt/parastation/bin/mpiexec
else
MPIEXEC=$(DESTDIR)$(prefix)/bin/mpiexec.hydra
endif

TESTSUMMARY := mpich2/test/mpi/summary
TESTSETS    := testlist testlist.dtp testlist.cvar testlist.gpu ps-test-minimal
ifdef TESTDIR
TESTDIR_    := $(TESTDIR)_
TESTFOLDERS := $(shell cd $(SRCDIR)/mpich2/test/mpi && find . -maxdepth 2 -mindepth 2 -type f -name "testlist*" | cut -d"/" -f2)
TESTDIRLIST := "TESTDIRS=$(TESTDIR)"
else
TESTDIRLIST :=
endif
ifdef TESTSET
TESTSET_    := $(TESTSET)_
TESTSETLIST := "TESTLIST=$(TESTSET)"
else
TESTSET     := testlist
ifndef TESTLIST
TESTSETLIST := "TESTLIST=testlist"
else
TESTSETLIST :=
endif
endif

largetest largetests largetesting: LARGE_TESTS="--enable-large-tests"

test tests testing largetest largetests largetesting:
ifeq ($(filter $(TESTSET),$(TESTSETS)),)
	@echo "ERROR: The test set '$(TESTSET)' does not exist!"
	@echo "Please provide a valid test set to be used."
	@echo "The following testsets are available:"
	@$(foreach set,$(TESTSETS), echo "* " $(set) ;)
else
ifneq ($(filter $(TESTDIR),$(TESTFOLDERS)),$(TESTDIR))
	@echo "ERROR: The test directory '$(TESTDIR)' does not exist!"
	@echo "Please provide a valid test directory to be used."
	@echo "The following test directories are available:"
	@$(foreach dir,$(TESTFOLDERS), echo "* " $(dir) ;)
else
ifeq ($(_TESTCUDA),unknown)
	@echo "ERROR: The option 'TESTCUDA=${TESTCUDA}' is unknown!"
else
	export TESTSET=$(TESTSET); \
	export MPIEXEC=$(MPIEXEC); \
	export PSI_OVERBOOK=1; \
	export PSI_LOG_SILENT=1; \
	export PSP_SCHED_YIELD=1; \
	export MPIEXEC_UNIVERSE_SIZE=100; \
	export LD_LIBRARY_PATH=$${LD_LIBRARY_PATH}:$(PSCOM_LD_LIBRARY_PATH); \
	export _LOGNAME=$(SRCDIR)/doc/test-$$($(SRCDIR)/scripts/vcversion -r $(SRCDIR))-$(TESTDIR_)$(TESTSET_)$$(date +%F_%T); \
	( cd mpich2/test/mpi ; $(SRCDIR)/mpich2/test/mpi/configure --with-mpi=$(prefix) $(CUDA_TESTS) $(LARGE_TESTS)); \
	( hostname; rpm -qi pscom; rpm -qi psmgmt; $(SRCDIR)/scripts/vcversion -r $(SRCDIR); \
	  echo $(MPIEXEC); \
	  $(MAKE) -C mpich2/test/mpi testing $(TESTSETLIST) $(TESTDIRLIST) && \
	  cp $(TESTSUMMARY).xml $${_LOGNAME}.xml && \
	  cp $(TESTSUMMARY).tap $${_LOGNAME}.tap && \
	  $(SRCDIR)/scripts/test-summary.sh $${_LOGNAME}.xml; \
	) 2>&1 | tee -a $${_LOGNAME}.log; \
	echo -e "\nSummary written to $${_LOGNAME}*"
	@! if test -f $(TESTSUMMARY).tap ; then fgrep 'not ok' $(TESTSUMMARY).tap; else echo -e "\nERROR: make $@ failed!" ; fi
endif
endif
endif

else

all: no_all

test testing: no_all

no_all:
	@echo "Please configure with a confset ('--with-confset') other than 'none'"
	@echo "or use 'make rpm', 'make srpm' or 'make tar'."
endif

########################################################
ifeq ($(CUDA_SUPPORT),true)
install: install_mpich2 modulefile install_version $(DESTDIR)$(prefix)/ChangeLog mpicc-conf
else
install: install_mpich2 modulefile install_version $(DESTDIR)$(prefix)/ChangeLog
endif

HYDRA_BIN += mpiexec mpirun
HYDRA_BIN += mpiexec.hydra hydra_pmi_proxy hydra_persist hydra_nameserver
HYDRA_FILES += $(HYDRA_BIN:%=bin/%) $(HYDRA_BIN:%=bin/%.py) $(HYDRA_BIN:%=bin/%.pyc) $(HYDRA_BIN:%=bin/%.pyo)
HYDRA_FILES += share/man/man1/mpiexec.1 share/doc/www1/mpiexec.html
LA_FILES += lib*.la


install_mpich2:
	$(MAKE) ACLOCAL=/bin/true AUTOCONF=/bin/true AUTOHEADER=/bin/true AUTOMAKE=/bin/true -C mpich2 install 
	$(RM) $(DESTDIR)$(prefix)/bin/parkill
# Remove libtool files	
	$(RM) $(LA_FILES:%=$(DESTDIR)$(libdir)/%)
ifeq ($(ENABLE_HYDRA),false)
# remove installed hydra files
	$(RM) $(HYDRA_FILES:%=$(DESTDIR)$(prefix)/%)
endif
# create mpi-ext.h (if not already provided by the device)
	touch $(DESTDIR)$(prefix)/include/mpi-ext.h
ifneq ($(fixpath),)
#  sed optinon -i is not available in sed version 3.x !!!
	find $(DESTDIR)$(prefix) -type f -exec grep -q $(prefix) {} \; -print | while read i; do \
	    if (file -b $$i | grep text >/dev/null) ; then \
		echo Patch $$i; \
		sed "s@$(prefix)@$(fixpath)@g" $$i > __tmp__; \
		chmod --reference=$$i __tmp__; \
		mv __tmp__ $$i; \
	    fi \
	done
endif

ifeq ($(CUDA_SUPPORT),true)
mpicc-conf: $(MPICCCONFDIR)/mpicc-cuda.conf $(MPICCCONFDIR)/mpicxx-cuda.conf  $(MPICCCONFDIR)/mpifort-cuda.conf $(MPICCCONFDIR)/mpif90-cuda.conf $(MPICCCONFDIR)/mpif77-cuda.conf

$(MPICCCONFDIR)/mpi%-cuda.conf:
ifneq ($(fixpath),)
	mkdir -p $(dir $@) && scripts/generate_mpicc-conf.sh | sed "s@$(prefix)@$(fixpath)@g" > $@ || :
else
	mkdir -p $(dir $@) && scripts/generate_mpicc-conf.sh > $@ || :
endif
endif

# Get Version
VER:=$(shell cd $(TOP_SRCDIR) && scripts/vcversion)

.PHONY install_version: $(DESTDIR)$(prefix)/VERSION.psmpi

$(DESTDIR)$(prefix)/VERSION.psmpi:
	mkdir -p $(dir $@)
	echo "ParaStation $(VER) ($(shell date))" > $@
	echo " config args: $(CONFIGARGS)" >> $@
	echo " mpich version: $(MPICH_VERSION) ($(MPICH_RELEASE_DATE))" >> $@
	echo " build host: $(shell hostname -s)" >> $@
	test -z $(EXTRA_VERSION_INFO) || echo $(EXTRA_VERSION_INFO) >> $@
ifneq ($(fixpath),)
#  sed optinon -i is not available in sed version 3.x !!!
	@echo Patch $@;
	sed "s@$(prefix)@$(fixpath)@g" $@ > __tmp__version
	mv __tmp__version $@
endif

$(DESTDIR)$(prefix)/ChangeLog: $(SRCDIR)/ChangeLog
	cp -a "$<" "$@"

.PHONY modulefile: $(DESTDIR)$(MODULEFILE)

$(DESTDIR)$(MODULEFILE):
ifneq ($(fixpath),)
	mkdir -p $(dir $@) && scripts/generate_modulefile.sh | sed "s@$(prefix)@$(fixpath)@g" > $@ || :
else
	mkdir -p $(dir $@) && scripts/generate_modulefile.sh > $@ || :
endif
####################################################

.PHONY: tar rpm srpm tag version
tar rpm srpm tag version:
	mkdir -p dist
	$(MAKE) -C dist -f $(SRCDIR)/dist/Makefile $@

%_clean %_distclean %_all:
	@echo "------------ $* ${@:$*_%=%} --------"
	$(MAKE) ACLOCAL=/bin/true AUTOCONF=/bin/true AUTOHEADER=/bin/true AUTOMAKE=/bin/true -C $* ${@:$*_%=%} || :

clean:		$(SUBDIRS:=_clean)

distclean:	$(SUBDIRS:=_distclean)


Makefile: $(SRCDIR)/Makefile.in
	cd $(TOP_BUILDDIR); ./config.status

From d2abf2bf6bc9ac2a6c7b4e119025a117430f6efd Mon Sep 17 00:00:00 2001
From: Carsten Clauss <clauss@par-tec.com>
Date: Mon, 22 Mar 2021 09:42:24 +0100
Subject: [PATCH] msa: Add MPID_Get_(max_)badge() to ADI3 interface

This adds the two functions MPID_Get_badge() and MPID_Get_max_badge()
that shall serve as a new interface to MPIR_Find_local_and_external()
for the creation of hierarchy/modularity-aware shadow communicators
when MPID_PSP_TOPOLOGY_AWARE_COLLOPS is defined.

That way, the known MPID_Get_node_id() and MPID_Get_max_node_id() can
still be used for actual node-related ID determination -- i.e., also
outside of MPIR_Find_local_and_external() (e.g., by hcoll or romio).
---
 mpich2/src/mpid/psp/include/mpidpre.h |  8 ++++--
 mpich2/src/mpid/psp/src/mpid_comm.c   | 50 ++++++++++++++++++++++-------------
 mpich2/src/util/procmap/local_proc.c  | 13 ++++++++-
 3 files changed, 49 insertions(+), 22 deletions(-)

diff --git a/mpich2/src/mpid/psp/include/mpidpre.h b/mpich2/src/mpid/psp/include/mpidpre.h
index 112723084..a89e7a682 100644
--- a/mpich2/src/mpid/psp/include/mpidpre.h
+++ b/mpich2/src/mpid/psp/include/mpidpre.h
@@ -49,8 +49,8 @@
  */
 
 #define MPID_PSP_TOPOLOGY_AWARE_COLLOPS
-/* When MPID_PSP_TOPOLOGY_AWARE_COLLOPS is defined, the functions MPID_Get_node_id() and
- * MPID_Get_max_node_id() have to provide topology information (in terms of node IDs for
+/* When MPID_PSP_TOPOLOGY_AWARE_COLLOPS is defined, the additional functions MPID_Get_badge()
+ * and MPID_Get_max_badge() have to provide topology information (in terms of node IDs for
  * SMP islands) for identifying SMP nodes and/or MSA modules for applying hierarchy-aware
  * communication topologies for collective MPI operations within the upper MPICH layer.
  */
@@ -756,6 +756,10 @@ int MPID_Free_mem( void *ptr );
    hierarchical collectives in a (mostly) device-independent way. */
 int MPID_Get_node_id(MPIR_Comm *comm, int rank, int *id_p);
 int MPID_Get_max_node_id(MPIR_Comm *comm, int *max_id_p);
+/* The PSP layer extends this by multi-level hierarchies and provides the
+   following additional functions for this: */
+int MPID_Get_badge(MPIR_Comm *comm, int rank, int *badge_p);
+int MPID_Get_max_badge(MPIR_Comm *comm, int *max_badge_p);
 
 #ifdef MPIDI_PSP_WITH_CUDA_AWARENESS
 int MPID_PSP_Reduce_for_cuda(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype,
diff --git a/mpich2/src/mpid/psp/src/mpid_comm.c b/mpich2/src/mpid/psp/src/mpid_comm.c
index 1e1a8ffd4..ce0aa9792 100644
--- a/mpich2/src/mpid/psp/src/mpid_comm.c
+++ b/mpich2/src/mpid/psp/src/mpid_comm.c
@@ -1,7 +1,7 @@
 /*
  * ParaStation
  *
- * Copyright (C) 2006-2020 ParTec Cluster Competence Center GmbH, Munich
+ * Copyright (C) 2006-2021 ParTec Cluster Competence Center GmbH, Munich
  *
  * This file may be distributed under the terms of the Q Public License
  * as defined in the file LICENSE.QPL included in the packaging of this
@@ -214,7 +214,8 @@ badge_unknown:
 	return MPIDI_PSP_get_max_badge_by_level(level) + 1; // plus 1 as wildcard for an unknown badge
 }
 
-static int MPIDI_PSP_comm_is_flat_on_level(MPIR_Comm *comm, MPIDI_PSP_topo_level_t *level)
+static
+int MPIDI_PSP_comm_is_flat_on_level(MPIR_Comm *comm, MPIDI_PSP_topo_level_t *level)
 {
 	int i;
 	int my_badge;
@@ -230,16 +231,12 @@ static int MPIDI_PSP_comm_is_flat_on_level(MPIR_Comm *comm, MPIDI_PSP_topo_level
 	return 1;
 }
 
-#endif /* MPID_PSP_TOPOLOGY_AWARE_COLLOPS */
-
-
-int MPID_Get_node_id(MPIR_Comm *comm, int rank, int *id_p)
+int MPID_Get_badge(MPIR_Comm *comm, int rank, int *badge_p)
 {
-#ifdef MPID_PSP_TOPOLOGY_AWARE_COLLOPS
 	MPIDI_PSP_topo_level_t *tl = MPIDI_Process.my_pg->topo_levels;
 
 	if(tl == NULL) {
-		*id_p = -1;
+		*badge_p = -1;
 		return MPI_ERR_OTHER;
 	}
 
@@ -248,21 +245,16 @@ int MPID_Get_node_id(MPIR_Comm *comm, int rank, int *id_p)
 		tl = tl->next;
 	}
 
-	*id_p = MPIDI_PSP_get_badge_by_level_and_comm_rank(comm, tl, rank);
+	*badge_p = MPIDI_PSP_get_badge_by_level_and_comm_rank(comm, tl, rank);
 	return MPI_SUCCESS;
-#else
-	*id_p = -1;
-	return MPI_ERR_OTHER;
-#endif
 }
 
-int MPID_Get_max_node_id(MPIR_Comm *comm, int *max_id_p)
+int MPID_Get_max_badge(MPIR_Comm *comm, int *max_badge_p)
 {
-#ifdef MPID_PSP_TOPOLOGY_AWARE_COLLOPS
 	MPIDI_PSP_topo_level_t *tl = MPIDI_Process.my_pg->topo_levels;
 
 	if(tl == NULL) {
-		*max_id_p = 0;
+		*max_badge_p = 0;
 		return MPI_ERR_OTHER;
 	}
 
@@ -271,12 +263,32 @@ int MPID_Get_max_node_id(MPIR_Comm *comm, int *max_id_p)
 		tl = tl->next;
 	}
 
-	*max_id_p =  MPIDI_PSP_get_max_badge_by_level(tl) + 1; // plus 1 for the "unknown badge" wildcard
+	*max_badge_p =  MPIDI_PSP_get_max_badge_by_level(tl) + 1; // plus 1 for the "unknown badge" wildcard
 	return MPI_SUCCESS;
-#else
+}
+
+#endif /* MPID_PSP_TOPOLOGY_AWARE_COLLOPS */
+
+
+int MPID_Get_node_id(MPIR_Comm *comm, int rank, int *id_p)
+{
+	/* The node IDs are unique, but do not have to be ordered and contiguous,
+	   nor do they have to be limited in value by the number of nodes!
+	*/
+	*id_p = MPIDI_Process.smp_node_id;
+	return MPI_SUCCESS;
+}
+
+int MPID_Get_max_node_id(MPIR_Comm *comm, int *max_id_p)
+{
+	/* Since the node IDs are not necessarily ordered and contiguous,
+	   we cannot determine a meaningful maximum here and therefore
+	   exit with a non-fatal error. This shall then only disable
+	   the creation of SMP-aware  communicators in the higher
+	   MPICH layer (see MPIR_Find_local_and_external()).
+	*/
 	*max_id_p = 0;
 	return MPI_ERR_OTHER;
-#endif
 }
 
 
diff --git a/mpich2/src/util/procmap/local_proc.c b/mpich2/src/util/procmap/local_proc.c
index d47e31249..b407fbb66 100644
--- a/mpich2/src/util/procmap/local_proc.c
+++ b/mpich2/src/util/procmap/local_proc.c
@@ -94,8 +94,11 @@ int MPIR_Find_local_and_external(MPIR_Comm * comm, int *local_size_p, int *local
                         "internode_table", MPL_MEM_COMM);
     MPIR_CHKPMEM_MALLOC(intranode_table, int *, sizeof(int) * comm->remote_size, mpi_errno,
                         "intranode_table", MPL_MEM_COMM);
-
+#ifndef MPID_PSP_TOPOLOGY_AWARE_COLLOPS
     mpi_errno = MPID_Get_max_node_id(comm, &max_node_id);
+#else
+    mpi_errno = MPID_Get_max_badge(comm, &max_node_id);
+#endif
     if (mpi_errno)
         MPIR_ERR_POP(mpi_errno);
     MPIR_Assert(max_node_id >= 0);
@@ -111,7 +114,11 @@ int MPIR_Find_local_and_external(MPIR_Comm * comm, int *local_size_p, int *local
 
     external_size = 0;
 
+#ifndef MPID_PSP_TOPOLOGY_AWARE_COLLOPS
     mpi_errno = MPID_Get_node_id(comm, comm->rank, &my_node_id);
+#else
+    mpi_errno = MPID_Get_badge(comm, comm->rank, &my_node_id);
+#endif
     if (mpi_errno)
         MPIR_ERR_POP(mpi_errno);
     MPIR_Assert(my_node_id >= 0);
@@ -122,7 +129,11 @@ int MPIR_Find_local_and_external(MPIR_Comm * comm, int *local_size_p, int *local
     external_rank = -1;
 
     for (i = 0; i < comm->remote_size; ++i) {
+#ifndef MPID_PSP_TOPOLOGY_AWARE_COLLOPS
         mpi_errno = MPID_Get_node_id(comm, i, &node_id);
+#else
+        mpi_errno = MPID_Get_badge(comm, i, &node_id);
+#endif
         if (mpi_errno)
             MPIR_ERR_POP(mpi_errno);
 

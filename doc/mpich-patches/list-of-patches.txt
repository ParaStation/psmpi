commit cfab4a8278c827cabfb07d8784e552f5306c128a
Author: Carsten Clauss <clauss@par-tec.com>
Date:   Tue Jan 14 18:03:09 2020 +0100

    Fix: According to MPICH, its 'recursive_doubling' algorithm for
    MPI_Allgather can currently only handle a comm_size with a power-of-2.
    Therefore, fall back to 'ring' for the time being if this is not met.

diff --git a/mpich2/src/mpi/coll/allgather/allgather_intra_recursive_doubling.c b/mpich2/src/mpi/coll/allgather/allgather_intra_recursive_doubling.c
index 33487b4dd..b409a15a7 100644
--- a/mpich2/src/mpi/coll/allgather/allgather_intra_recursive_doubling.c
+++ b/mpich2/src/mpi/coll/allgather/allgather_intra_recursive_doubling.c
@@ -48,9 +48,13 @@ int MPIR_Allgather_intra_recursive_doubling(const void *sendbuf,
     comm_size = comm_ptr->local_size;
     rank = comm_ptr->rank;
 
+    if(comm_size & (comm_size - 1)) {
+        /* Currently this algorithm can only handle power-of-2 comm_size. */
+        return MPIR_Allgather_intra_ring(sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype,
+                                         comm_ptr, errflag);
+    }
 #ifdef HAVE_ERROR_CHECKING
-    /* Currently this algorithm can only handle power-of-2 comm_size.
-     * Non power-of-2 comm_size is still experimental */
+    /* Non power-of-2 comm_size is still experimental */
     MPIR_Assert(!(comm_size & (comm_size - 1)));
 #endif /* HAVE_ERROR_CHECKING */
 
diff --git a/mpich2/src/mpi/coll/iallgather/iallgather_intra_recursive_doubling.c b/mpich2/src/mpi/coll/iallgather/iallgather_intra_recursive_doubling.c
index b5d79a133..1c0c6eef4 100644
--- a/mpich2/src/mpi/coll/iallgather/iallgather_intra_recursive_doubling.c
+++ b/mpich2/src/mpi/coll/iallgather/iallgather_intra_recursive_doubling.c
@@ -65,9 +65,13 @@ int MPIR_Iallgather_sched_intra_recursive_doubling(const void *sendbuf, int send
     comm_size = comm_ptr->local_size;
     rank = comm_ptr->rank;
 
+    if(comm_size & (comm_size - 1)) {
+        /* Currently this algorithm can only handle power-of-2 comm_size. */
+        return MPIR_Iallgather_sched_intra_ring(sendbuf, sendcount, sendtype, recvbuf,
+                                                recvcount, recvtype, comm_ptr, s);
+    }
 #ifdef HAVE_ERROR_CHECKING
-    /* Currently this algorithm can only handle power-of-2 comm_size.
-     * Non power-of-2 comm_size is still experimental */
+    /* Non power-of-2 comm_size is still experimental */
     MPIR_Assert(!(comm_size & (comm_size - 1)));
 #endif /* HAVE_ERROR_CHECKING */
 

commit 3c8d6dc28e8fc65a77f56ec4128c3d9bc7b54019
Author: Carsten Clauss <clauss@par-tec.com>
Date:   Tue Mar 3 10:57:04 2020 +0100

    coll: Fix bug in MPICH's scatter_ring algorithm of MPI_Ibcast

diff --git a/mpich2/src/mpi/coll/ibcast/ibcast_intra_scatter_ring_allgather.c b/mpich2/src/mpi/coll/ibcast/ibcast_intra_scatter_ring_allgather.c
index eb7818dc0..513d47ad2 100644
--- a/mpich2/src/mpi/coll/ibcast/ibcast_intra_scatter_ring_allgather.c
+++ b/mpich2/src/mpi/coll/ibcast/ibcast_intra_scatter_ring_allgather.c
@@ -88,7 +88,7 @@ int MPIR_Ibcast_sched_intra_scatter_ring_allgather(void *buffer, int count, MPI_
 
     /* curr_size is the amount of data that this process now has stored in
      * buffer at byte offset (rank*scatter_size) */
-    curr_size = MPL_MIN(scatter_size, (nbytes - (rank * scatter_size)));
+    curr_size = MPL_MIN(scatter_size, (nbytes - (((rank - root + comm_size) % comm_size) * scatter_size)));
     if (curr_size < 0)
         curr_size = 0;
     /* curr_size bytes already inplace */

commit c0235a89b2d22f81daec2bbca29cf1b1c9f3778e
Author: Carsten Clauss <clauss@par-tec.com>
Date:   Wed May 6 20:08:53 2020 +0200

    coll: Tune/fix internal algorithm selection for
    MPIR_Allreduce_intra_auto() and MPIR_Bcast_intra_smp()

diff --git a/mpich2/src/mpi/coll/allreduce/allreduce.c b/mpich2/src/mpi/coll/allreduce/allreduce.c
index e9cf99edc..e2b0a24cc 100644
--- a/mpich2/src/mpi/coll/allreduce/allreduce.c
+++ b/mpich2/src/mpi/coll/allreduce/allreduce.c
@@ -183,6 +183,7 @@ int MPIR_Allreduce_intra_auto(const void *sendbuf,
     }
 
     pof2 = comm_ptr->pof2;
+    nbytes = type_size * count;
     if ((nbytes <= MPIR_CVAR_ALLREDUCE_SHORT_MSG_SIZE) ||
         (HANDLE_GET_KIND(op) != HANDLE_KIND_BUILTIN) || (count < pof2)) {
         mpi_errno =
diff --git a/mpich2/src/mpi/coll/bcast/bcast_intra_smp.c b/mpich2/src/mpi/coll/bcast/bcast_intra_smp.c
index 9c119470c..20864d942 100644
--- a/mpich2/src/mpi/coll/bcast/bcast_intra_smp.c
+++ b/mpich2/src/mpi/coll/bcast/bcast_intra_smp.c
@@ -40,6 +40,11 @@ int MPIR_Bcast_intra_smp(void *buffer, int count, MPI_Datatype datatype, int roo
 
     if ((nbytes < MPIR_CVAR_BCAST_SHORT_MSG_SIZE) ||
         (comm_ptr->local_size < MPIR_CVAR_BCAST_MIN_PROCS)) {
+        /* SHORT MESSAGES:
+	 *  1. Send to intra-node rank 0 on root's node
+	 *  2. Perform the inter-node bcast
+	 *  3. Perform the intra-node bcast on all nodes
+	 */
         /* send to intranode-rank 0 on the root's node */
         if (comm_ptr->node_comm != NULL && MPIR_Get_intranode_rank(comm_ptr, root) > 0) {       /* is not the node root (0) and is on our node (!-1) */
             if (root == comm_ptr->rank) {
@@ -107,13 +112,19 @@ int MPIR_Bcast_intra_smp(void *buffer, int count, MPI_Datatype datatype, int roo
             }
         }
     } else {    /* (nbytes > MPIR_CVAR_BCAST_SHORT_MSG_SIZE) && (comm_ptr->size >= MPIR_CVAR_BCAST_MIN_PROCS) */
-
+#if 0
         /* supposedly...
          * smp+doubling good for pof2
          * reg+ring better for non-pof2 */
         if (nbytes < MPIR_CVAR_BCAST_LONG_MSG_SIZE && MPL_is_pof2(comm_ptr->local_size, NULL)) {
             /* medium-sized msg and pof2 np */
-
+#else
+            /* LARGE MESSAGES:
+	     *  1. Perform the intra-node bcast on root's node
+	     *  2. Perform the inter-node bcast
+	     *  3. Perform the intra-node bcast except for root's node
+	     */
+#endif
             /* perform the intranode broadcast on the root's node */
             if (comm_ptr->node_comm != NULL && MPIR_Get_intranode_rank(comm_ptr, root) > 0) {   /* is not the node root (0) and is on our node (!-1) */
                 /* FIXME binomial may not be the best algorithm for on-node
@@ -162,6 +173,7 @@ int MPIR_Bcast_intra_smp(void *buffer, int count, MPI_Datatype datatype, int roo
                     MPIR_ERR_ADD(mpi_errno_ret, mpi_errno);
                 }
             }
+#if 0
         } else {        /* large msg or non-pof2 */
 
             /* FIXME It would be good to have an SMP-aware version of this
@@ -179,6 +191,7 @@ int MPIR_Bcast_intra_smp(void *buffer, int count, MPI_Datatype datatype, int roo
                 MPIR_ERR_ADD(mpi_errno_ret, mpi_errno);
             }
         }
+#endif
     }
 
   fn_exit:

commit 5aa712f8ed4df2e08d05260a383d7d1fbcdadca6
Author: Carsten Clauss <clauss@par-tec.com>
Date:   Fri Jun 12 13:10:26 2020 +0200

    mpich/romio: Fix some error code handling in MPICH's ROMIO stack.

diff --git a/mpich2/src/binding/fortran/mpif_h/file_openf.c b/mpich2/src/binding/fortran/mpif_h/file_openf.c
index a6aaf4df3..1d8f99a15 100644
--- a/mpich2/src/binding/fortran/mpif_h/file_openf.c
+++ b/mpich2/src/binding/fortran/mpif_h/file_openf.c
@@ -268,7 +268,7 @@ extern FORT_DLL_SPEC void FORT_CALL pmpi_file_open_( MPI_Fint *, char * FORT_MIX
 FORT_DLL_SPEC void FORT_CALL mpi_file_open_ ( MPI_Fint *v1, char *v2 FORT_MIXED_LEN(d2), MPI_Fint *v3, MPI_Fint *v4, MPI_Fint *v5, MPI_Fint *ierr FORT_END_LEN(d2) ){
 #ifdef MPI_MODE_RDONLY
     char *p2;
-    MPI_File l5;
+    MPI_File l5 = MPI_FILE_NULL;
 
     {char *p = v2 + d2 - 1;
      int  li;
diff --git a/mpich2/src/mpi/romio/adio/common/ad_fstype.c b/mpich2/src/mpi/romio/adio/common/ad_fstype.c
index 430d1e577..aa9762fb7 100644
--- a/mpich2/src/mpi/romio/adio/common/ad_fstype.c
+++ b/mpich2/src/mpi/romio/adio/common/ad_fstype.c
@@ -307,6 +307,7 @@ static void ADIO_FileSysType_fncall(const char *filename, int *fstype, int *erro
     *error_code = MPIO_Err_create_code(MPI_SUCCESS, MPIR_ERR_RECOVERABLE,
                                        myname, __LINE__, MPI_ERR_NO_SUCH_FILE,
                                        "**filename", "**filename %s", filename);
+    return; /* If we get here, we directly leave with the newly set error code. */
     /* --END ERROR HANDLING-- */
 #endif /* STATVFS APPROACH */
 
@@ -429,6 +430,7 @@ static void ADIO_FileSysType_fncall(const char *filename, int *fstype, int *erro
     *error_code = MPIO_Err_create_code(MPI_SUCCESS, MPIR_ERR_RECOVERABLE,
                                        myname, __LINE__, MPI_ERR_NO_SUCH_FILE,
                                        "**filename", "**filename %s", filename);
+    return; /* If we get here, we directly leave with the newly set error code. */
     /* --END ERROR HANDLING-- */
 #endif /* STATFS APPROACH */
 
diff --git a/mpich2/src/mpi/romio/mpi-io/glue/mpich/mpio_err.c b/mpich2/src/mpi/romio/mpi-io/glue/mpich/mpio_err.c
index 9834b4c44..d973b0910 100644
--- a/mpich2/src/mpi/romio/mpi-io/glue/mpich/mpio_err.c
+++ b/mpich2/src/mpi/romio/mpi-io/glue/mpich/mpio_err.c
@@ -76,7 +76,10 @@ int MPIO_Err_return_file(MPI_File mpi_fh, int error_code)
         MPL_snprintf(error_msg, 4096, "I/O error: ");
         len = (int) strlen(error_msg);
         MPIR_Err_get_string(error_code, &error_msg[len], 4096 - len, NULL);
-        MPIR_Abort(fh->comm, MPI_SUCCESS, error_code, error_msg);
+        if (fh)
+            MPIR_Abort(fh->comm, MPI_SUCCESS, error_code, error_msg);
+        else
+            MPIR_Abort(MPI_COMM_WORLD, MPI_SUCCESS, error_code, error_msg);
     }
     /* --END ERROR HANDLING-- */
     else if (kind == 2) {

commit 5b9c18657208e8c5a20183012f1a444df822000a
Author: Carsten Clauss <clauss@par-tec.com>
Date:   Wed Sep 16 11:31:15 2020 +0200

    hcoll: Avoid some compiler warnings in MPICH's hcoll bindings
    
    These are some minor changes in MPICH's binding code for hcoll
    in mpid/common/hcoll that fixes some compiler warnings for
    confset=default. (However, with confset=devel there are still
    even more warnings not being fixed yet...)

diff --git a/mpich2/src/mpid/common/hcoll/hcoll_dtypes.h b/mpich2/src/mpid/common/hcoll/hcoll_dtypes.h
index 4cd1da3f0..b70ed65ca 100644
--- a/mpich2/src/mpid/common/hcoll/hcoll_dtypes.h
+++ b/mpich2/src/mpid/common/hcoll/hcoll_dtypes.h
@@ -18,7 +18,7 @@ int hcoll_type_commit_hook(MPIR_Datatype * dtype_p);
 int hcoll_type_free_hook(MPIR_Datatype * dtype_p);
 dte_data_representation_t mpi_dtype_2_hcoll_dtype(MPI_Datatype datatype, int count, const int mode);
 
-static dte_data_representation_t mpi_dtype_2_dte_dtype(MPI_Datatype datatype)
+static inline dte_data_representation_t mpi_dtype_2_dte_dtype(MPI_Datatype datatype)
 {
     switch (datatype) {
         case MPI_CHAR:
@@ -54,7 +54,7 @@ static dte_data_representation_t mpi_dtype_2_dte_dtype(MPI_Datatype datatype)
     }
 }
 
-static hcoll_dte_op_t *mpi_op_2_dte_op(MPI_Op op)
+static inline hcoll_dte_op_t *mpi_op_2_dte_op(MPI_Op op)
 {
     switch (op) {
         case MPI_MAX:
diff --git a/mpich2/src/mpid/common/hcoll/hcoll_rte.c b/mpich2/src/mpid/common/hcoll/hcoll_rte.c
index 01a4f3404..833ec1185 100644
--- a/mpich2/src/mpid/common/hcoll/hcoll_rte.c
+++ b/mpich2/src/mpid/common/hcoll/hcoll_rte.c
@@ -432,7 +432,7 @@ static int get_mpi_type_envelope(void *mpi_type, int *num_integers,
                                  hcoll_mpi_type_combiner_t * combiner)
 {
     int mpi_combiner;
-    MPI_Datatype dt_handle = (MPI_Datatype) mpi_type;
+    MPI_Datatype dt_handle = (intptr_t) mpi_type;
 
     MPIR_Type_get_envelope(dt_handle, num_integers, num_addresses, num_datatypes, &mpi_combiner);
 
@@ -446,7 +446,7 @@ static int get_mpi_type_contents(void *mpi_type, int max_integers, int max_addre
                                  void *array_of_addresses, void *array_of_datatypes)
 {
     int ret;
-    MPI_Datatype dt_handle = (MPI_Datatype) mpi_type;
+    MPI_Datatype dt_handle = (intptr_t) mpi_type;
 
     ret = MPIR_Type_get_contents(dt_handle,
                                  max_integers, max_addresses, max_datatypes,
@@ -459,7 +459,7 @@ static int get_mpi_type_contents(void *mpi_type, int max_integers, int max_addre
 
 static int get_hcoll_type(void *mpi_type, dte_data_representation_t * hcoll_type)
 {
-    MPI_Datatype dt_handle = (MPI_Datatype) mpi_type;
+    MPI_Datatype dt_handle = (intptr_t) mpi_type;
     MPIR_Datatype *dt_ptr;
 
     *hcoll_type = mpi_dtype_2_hcoll_dtype(dt_handle, -1, TRY_FIND_DERIVED);

commit d2abf2bf6bc9ac2a6c7b4e119025a117430f6efd
Author: Carsten Clauss <clauss@par-tec.com>
Date:   Mon Mar 22 09:42:24 2021 +0100

    msa: Add MPID_Get_(max_)badge() to ADI3 interface
    
    This adds the two functions MPID_Get_badge() and MPID_Get_max_badge()
    that shall serve as a new interface to MPIR_Find_local_and_external()
    for the creation of hierarchy/modularity-aware shadow communicators
    when MPID_PSP_TOPOLOGY_AWARE_COLLOPS is defined.
    
    That way, the known MPID_Get_node_id() and MPID_Get_max_node_id() can
    still be used for actual node-related ID determination -- i.e., also
    outside of MPIR_Find_local_and_external() (e.g., by hcoll or romio).

diff --git a/mpich2/src/mpid/psp/include/mpidpre.h b/mpich2/src/mpid/psp/include/mpidpre.h
index 112723084..a89e7a682 100644
--- a/mpich2/src/mpid/psp/include/mpidpre.h
+++ b/mpich2/src/mpid/psp/include/mpidpre.h
@@ -49,8 +49,8 @@
  */
 
 #define MPID_PSP_TOPOLOGY_AWARE_COLLOPS
-/* When MPID_PSP_TOPOLOGY_AWARE_COLLOPS is defined, the functions MPID_Get_node_id() and
- * MPID_Get_max_node_id() have to provide topology information (in terms of node IDs for
+/* When MPID_PSP_TOPOLOGY_AWARE_COLLOPS is defined, the additional functions MPID_Get_badge()
+ * and MPID_Get_max_badge() have to provide topology information (in terms of node IDs for
  * SMP islands) for identifying SMP nodes and/or MSA modules for applying hierarchy-aware
  * communication topologies for collective MPI operations within the upper MPICH layer.
  */
@@ -756,6 +756,10 @@ int MPID_Free_mem( void *ptr );
    hierarchical collectives in a (mostly) device-independent way. */
 int MPID_Get_node_id(MPIR_Comm *comm, int rank, int *id_p);
 int MPID_Get_max_node_id(MPIR_Comm *comm, int *max_id_p);
+/* The PSP layer extends this by multi-level hierarchies and provides the
+   following additional functions for this: */
+int MPID_Get_badge(MPIR_Comm *comm, int rank, int *badge_p);
+int MPID_Get_max_badge(MPIR_Comm *comm, int *max_badge_p);
 
 #ifdef MPIDI_PSP_WITH_CUDA_AWARENESS
 int MPID_PSP_Reduce_for_cuda(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype,
diff --git a/mpich2/src/mpid/psp/src/mpid_comm.c b/mpich2/src/mpid/psp/src/mpid_comm.c
index 1e1a8ffd4..ce0aa9792 100644
--- a/mpich2/src/mpid/psp/src/mpid_comm.c
+++ b/mpich2/src/mpid/psp/src/mpid_comm.c
@@ -1,7 +1,7 @@
 /*
  * ParaStation
  *
- * Copyright (C) 2006-2020 ParTec Cluster Competence Center GmbH, Munich
+ * Copyright (C) 2006-2021 ParTec Cluster Competence Center GmbH, Munich
  *
  * This file may be distributed under the terms of the Q Public License
  * as defined in the file LICENSE.QPL included in the packaging of this
@@ -214,7 +214,8 @@ badge_unknown:
 	return MPIDI_PSP_get_max_badge_by_level(level) + 1; // plus 1 as wildcard for an unknown badge
 }
 
-static int MPIDI_PSP_comm_is_flat_on_level(MPIR_Comm *comm, MPIDI_PSP_topo_level_t *level)
+static
+int MPIDI_PSP_comm_is_flat_on_level(MPIR_Comm *comm, MPIDI_PSP_topo_level_t *level)
 {
 	int i;
 	int my_badge;
@@ -230,16 +231,12 @@ static int MPIDI_PSP_comm_is_flat_on_level(MPIR_Comm *comm, MPIDI_PSP_topo_level
 	return 1;
 }
 
-#endif /* MPID_PSP_TOPOLOGY_AWARE_COLLOPS */
-
-
-int MPID_Get_node_id(MPIR_Comm *comm, int rank, int *id_p)
+int MPID_Get_badge(MPIR_Comm *comm, int rank, int *badge_p)
 {
-#ifdef MPID_PSP_TOPOLOGY_AWARE_COLLOPS
 	MPIDI_PSP_topo_level_t *tl = MPIDI_Process.my_pg->topo_levels;
 
 	if(tl == NULL) {
-		*id_p = -1;
+		*badge_p = -1;
 		return MPI_ERR_OTHER;
 	}
 
@@ -248,21 +245,16 @@ int MPID_Get_node_id(MPIR_Comm *comm, int rank, int *id_p)
 		tl = tl->next;
 	}
 
-	*id_p = MPIDI_PSP_get_badge_by_level_and_comm_rank(comm, tl, rank);
+	*badge_p = MPIDI_PSP_get_badge_by_level_and_comm_rank(comm, tl, rank);
 	return MPI_SUCCESS;
-#else
-	*id_p = -1;
-	return MPI_ERR_OTHER;
-#endif
 }
 
-int MPID_Get_max_node_id(MPIR_Comm *comm, int *max_id_p)
+int MPID_Get_max_badge(MPIR_Comm *comm, int *max_badge_p)
 {
-#ifdef MPID_PSP_TOPOLOGY_AWARE_COLLOPS
 	MPIDI_PSP_topo_level_t *tl = MPIDI_Process.my_pg->topo_levels;
 
 	if(tl == NULL) {
-		*max_id_p = 0;
+		*max_badge_p = 0;
 		return MPI_ERR_OTHER;
 	}
 
@@ -271,12 +263,32 @@ int MPID_Get_max_node_id(MPIR_Comm *comm, int *max_id_p)
 		tl = tl->next;
 	}
 
-	*max_id_p =  MPIDI_PSP_get_max_badge_by_level(tl) + 1; // plus 1 for the "unknown badge" wildcard
+	*max_badge_p =  MPIDI_PSP_get_max_badge_by_level(tl) + 1; // plus 1 for the "unknown badge" wildcard
 	return MPI_SUCCESS;
-#else
+}
+
+#endif /* MPID_PSP_TOPOLOGY_AWARE_COLLOPS */
+
+
+int MPID_Get_node_id(MPIR_Comm *comm, int rank, int *id_p)
+{
+	/* The node IDs are unique, but do not have to be ordered and contiguous,
+	   nor do they have to be limited in value by the number of nodes!
+	*/
+	*id_p = MPIDI_Process.smp_node_id;
+	return MPI_SUCCESS;
+}
+
+int MPID_Get_max_node_id(MPIR_Comm *comm, int *max_id_p)
+{
+	/* Since the node IDs are not necessarily ordered and contiguous,
+	   we cannot determine a meaningful maximum here and therefore
+	   exit with a non-fatal error. This shall then only disable
+	   the creation of SMP-aware  communicators in the higher
+	   MPICH layer (see MPIR_Find_local_and_external()).
+	*/
 	*max_id_p = 0;
 	return MPI_ERR_OTHER;
-#endif
 }
 
 
diff --git a/mpich2/src/util/procmap/local_proc.c b/mpich2/src/util/procmap/local_proc.c
index d47e31249..b407fbb66 100644
--- a/mpich2/src/util/procmap/local_proc.c
+++ b/mpich2/src/util/procmap/local_proc.c
@@ -94,8 +94,11 @@ int MPIR_Find_local_and_external(MPIR_Comm * comm, int *local_size_p, int *local
                         "internode_table", MPL_MEM_COMM);
     MPIR_CHKPMEM_MALLOC(intranode_table, int *, sizeof(int) * comm->remote_size, mpi_errno,
                         "intranode_table", MPL_MEM_COMM);
-
+#ifndef MPID_PSP_TOPOLOGY_AWARE_COLLOPS
     mpi_errno = MPID_Get_max_node_id(comm, &max_node_id);
+#else
+    mpi_errno = MPID_Get_max_badge(comm, &max_node_id);
+#endif
     if (mpi_errno)
         MPIR_ERR_POP(mpi_errno);
     MPIR_Assert(max_node_id >= 0);
@@ -111,7 +114,11 @@ int MPIR_Find_local_and_external(MPIR_Comm * comm, int *local_size_p, int *local
 
     external_size = 0;
 
+#ifndef MPID_PSP_TOPOLOGY_AWARE_COLLOPS
     mpi_errno = MPID_Get_node_id(comm, comm->rank, &my_node_id);
+#else
+    mpi_errno = MPID_Get_badge(comm, comm->rank, &my_node_id);
+#endif
     if (mpi_errno)
         MPIR_ERR_POP(mpi_errno);
     MPIR_Assert(my_node_id >= 0);
@@ -122,7 +129,11 @@ int MPIR_Find_local_and_external(MPIR_Comm * comm, int *local_size_p, int *local
     external_rank = -1;
 
     for (i = 0; i < comm->remote_size; ++i) {
+#ifndef MPID_PSP_TOPOLOGY_AWARE_COLLOPS
         mpi_errno = MPID_Get_node_id(comm, i, &node_id);
+#else
+        mpi_errno = MPID_Get_badge(comm, i, &node_id);
+#endif
         if (mpi_errno)
             MPIR_ERR_POP(mpi_errno);
 

commit 2483524ea87197b023c3802a54e7e6b2e03770c4
Author: Carsten Clauss <clauss@par-tec.com>
Date:   Thu Aug 12 15:02:35 2021 +0200

    mpich: Fix for Bcast with messages > 2 GiB
    
    This fixes some type conversion issues within the different Bcast
    algorithms of MPICH when dealing with message lengths > 2 GiB.

diff --git a/mpich2/src/mpi/coll/bcast/bcast.h b/mpich2/src/mpi/coll/bcast/bcast.h
index 82f29be97..9cc2ab83e 100644
--- a/mpich2/src/mpi/coll/bcast/bcast.h
+++ b/mpich2/src/mpi/coll/bcast/bcast.h
@@ -11,7 +11,7 @@
 #include "mpiimpl.h"
 
 int MPII_Scatter_for_bcast(void *buffer, int count, MPI_Datatype datatype,
-                           int root, MPIR_Comm * comm_ptr, int nbytes, void *tmp_buf,
+                           int root, MPIR_Comm * comm_ptr, MPI_Aint nbytes, void *tmp_buf,
                            int is_contig, MPIR_Errflag_t * errflag);
 
 #endif /* BCAST_H_INCLUDED */
diff --git a/mpich2/src/mpi/coll/bcast/bcast_intra_scatter_recursive_doubling_allgather.c b/mpich2/src/mpi/coll/bcast/bcast_intra_scatter_recursive_doubling_allgather.c
index 25983b0da..9ffb1eb73 100644
--- a/mpich2/src/mpi/coll/bcast/bcast_intra_scatter_recursive_doubling_allgather.c
+++ b/mpich2/src/mpi/coll/bcast/bcast_intra_scatter_recursive_doubling_allgather.c
@@ -43,12 +43,14 @@ int MPIR_Bcast_intra_scatter_recursive_doubling_allgather(void *buffer,
     int relative_rank, mask;
     int mpi_errno = MPI_SUCCESS;
     int mpi_errno_ret = MPI_SUCCESS;
-    int scatter_size;
+    MPI_Aint scatter_size;
     MPI_Aint curr_size, recv_size = 0;
     int j, k, i, tmp_mask, is_contig;
     MPI_Aint type_size, nbytes = 0;
-    int relative_dst, dst_tree_root, my_tree_root, send_offset;
-    int recv_offset, tree_root, nprocs_completed, offset;
+    int relative_dst, dst_tree_root, my_tree_root;
+    MPI_Aint send_offset;
+    MPI_Aint recv_offset;
+    int tree_root, nprocs_completed, offset;
     MPI_Aint position;
     MPIR_CHKLMEM_DECL(1);
     MPI_Aint true_extent, true_lb;
diff --git a/mpich2/src/mpi/coll/bcast/bcast_intra_scatter_ring_allgather.c b/mpich2/src/mpi/coll/bcast/bcast_intra_scatter_ring_allgather.c
index 43cb8978a..8b0a86989 100644
--- a/mpich2/src/mpi/coll/bcast/bcast_intra_scatter_ring_allgather.c
+++ b/mpich2/src/mpi/coll/bcast/bcast_intra_scatter_ring_allgather.c
@@ -36,7 +36,7 @@ int MPIR_Bcast_intra_scatter_ring_allgather(void *buffer,
     int rank, comm_size;
     int mpi_errno = MPI_SUCCESS;
     int mpi_errno_ret = MPI_SUCCESS;
-    int scatter_size;
+    MPI_Aint scatter_size;
     int j, i, is_contig;
     MPI_Aint nbytes, type_size, position;
     int left, right, jnext;
@@ -107,7 +107,8 @@ int MPIR_Bcast_intra_scatter_ring_allgather(void *buffer,
     j = rank;
     jnext = left;
     for (i = 1; i < comm_size; i++) {
-        int left_count, right_count, left_disp, right_disp, rel_j, rel_jnext;
+        MPI_Aint left_count, right_count, left_disp, right_disp;
+        int rel_j, rel_jnext;
 
         rel_j = (j - root + comm_size) % comm_size;
         rel_jnext = (jnext - root + comm_size) % comm_size;
diff --git a/mpich2/src/mpi/coll/bcast/bcast_utils.c b/mpich2/src/mpi/coll/bcast/bcast_utils.c
index 76f8de5ae..1985b8a0f 100644
--- a/mpich2/src/mpi/coll/bcast/bcast_utils.c
+++ b/mpich2/src/mpi/coll/bcast/bcast_utils.c
@@ -27,14 +27,14 @@ int MPII_Scatter_for_bcast(void *buffer ATTRIBUTE((unused)),
                            MPI_Datatype datatype ATTRIBUTE((unused)),
                            int root,
                            MPIR_Comm * comm_ptr,
-                           int nbytes, void *tmp_buf, int is_contig, MPIR_Errflag_t * errflag)
+                           MPI_Aint nbytes, void *tmp_buf, int is_contig, MPIR_Errflag_t * errflag)
 {
     MPI_Status status;
     int rank, comm_size, src, dst;
     int relative_rank, mask;
     int mpi_errno = MPI_SUCCESS;
     int mpi_errno_ret = MPI_SUCCESS;
-    int scatter_size, recv_size = 0;
+    MPI_Aint scatter_size, recv_size = 0;
     MPI_Aint curr_size, send_size;
 
     comm_size = comm_ptr->local_size;

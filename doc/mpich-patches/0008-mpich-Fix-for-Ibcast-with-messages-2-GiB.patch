From 4d06a7c4733bccb81d1a05832959edef25dd390b Mon Sep 17 00:00:00 2001
From: Carsten Clauss <clauss@par-tec.com>
Date: Mon, 30 Aug 2021 09:28:15 +0200
Subject: [PATCH] mpich: Fix for Ibcast with messages > 2 GiB

This fixes some type conversion issues regarding the handling of
messages with a lengths > 2 GiB by the non-blocking scheduling of
MPICH's Ibcast() algorithms.
---
 mpich2/src/mpi/coll/ibcast/ibcast.h                            |  6 +++---
 .../ibcast/ibcast_intra_scatter_recursive_doubling_allgather.c |  9 +++++----
 .../src/mpi/coll/ibcast/ibcast_intra_scatter_ring_allgather.c  | 10 ++++++----
 mpich2/src/mpi/coll/ibcast/ibcast_utils.c                      |  4 ++--
 4 files changed, 16 insertions(+), 13 deletions(-)

diff --git a/mpich2/src/mpi/coll/ibcast/ibcast.h b/mpich2/src/mpi/coll/ibcast/ibcast.h
index bd69819d8..91cb4a566 100644
--- a/mpich2/src/mpi/coll/ibcast/ibcast.h
+++ b/mpich2/src/mpi/coll/ibcast/ibcast.h
@@ -11,15 +11,15 @@
 
 
 struct MPII_Ibcast_state {
-    int curr_bytes;
-    int n_bytes;
+    MPI_Aint curr_bytes;
+    MPI_Aint n_bytes;
     MPI_Status status;
 };
 
 int MPII_Ibcast_sched_test_length(MPIR_Comm * comm, int tag, void *state);
 int MPII_Ibcast_sched_test_curr_length(MPIR_Comm * comm, int tag, void *state);
 int MPII_Ibcast_sched_add_length(MPIR_Comm * comm, int tag, void *state);
-int MPII_Iscatter_for_bcast_sched(void *tmp_buf, int root, MPIR_Comm * comm_ptr, int nbytes,
+int MPII_Iscatter_for_bcast_sched(void *tmp_buf, int root, MPIR_Comm * comm_ptr, MPI_Aint nbytes,
                                   MPIR_Sched_t s);
 
 #endif /* IBCAST_H_INCLUDED */
diff --git a/mpich2/src/mpi/coll/ibcast/ibcast_intra_scatter_recursive_doubling_allgather.c b/mpich2/src/mpi/coll/ibcast/ibcast_intra_scatter_recursive_doubling_allgather.c
index 8baf1d9b4..8b08a0de4 100644
--- a/mpich2/src/mpi/coll/ibcast/ibcast_intra_scatter_recursive_doubling_allgather.c
+++ b/mpich2/src/mpi/coll/ibcast/ibcast_intra_scatter_recursive_doubling_allgather.c
@@ -59,10 +59,11 @@ int MPIR_Ibcast_sched_intra_scatter_recursive_doubling_allgather(void *buffer, i
     int mpi_errno = MPI_SUCCESS;
     int rank, comm_size, dst;
     int relative_rank, mask;
-    int scatter_size, nbytes, curr_size, incoming_count;
+    MPI_Aint scatter_size, nbytes, curr_size, incoming_count;
     int type_size, j, k, i, tmp_mask, is_contig;
-    int relative_dst, dst_tree_root, my_tree_root, send_offset;
-    int recv_offset, tree_root, nprocs_completed, offset;
+    int relative_dst, dst_tree_root, my_tree_root;
+    MPI_Aint send_offset, recv_offset, offset;
+    int tree_root, nprocs_completed;
     MPI_Aint true_extent, true_lb;
     void *tmp_buf;
     struct MPII_Ibcast_state *ibcast_state;
@@ -94,7 +95,7 @@ int MPIR_Ibcast_sched_intra_scatter_recursive_doubling_allgather(void *buffer, i
 
     MPIR_Datatype_get_size_macro(datatype, type_size);
 
-    nbytes = type_size * count;
+    nbytes = (MPI_Aint) type_size * count;
     ibcast_state->n_bytes = nbytes;
     ibcast_state->curr_bytes = 0;
     if (is_contig) {
diff --git a/mpich2/src/mpi/coll/ibcast/ibcast_intra_scatter_ring_allgather.c b/mpich2/src/mpi/coll/ibcast/ibcast_intra_scatter_ring_allgather.c
index 513d47ad2..3d09341ab 100644
--- a/mpich2/src/mpi/coll/ibcast/ibcast_intra_scatter_ring_allgather.c
+++ b/mpich2/src/mpi/coll/ibcast/ibcast_intra_scatter_ring_allgather.c
@@ -34,8 +34,9 @@ int MPIR_Ibcast_sched_intra_scatter_ring_allgather(void *buffer, int count, MPI_
 {
     int mpi_errno = MPI_SUCCESS;
     int comm_size, rank;
-    int is_contig, type_size, nbytes;
-    int scatter_size, curr_size;
+    int is_contig, type_size;
+    MPI_Aint nbytes;
+    MPI_Aint scatter_size, curr_size;
     int i, j, jnext, left, right;
     MPI_Aint true_extent, true_lb;
     void *tmp_buf = NULL;
@@ -60,7 +61,7 @@ int MPIR_Ibcast_sched_intra_scatter_ring_allgather(void *buffer, int count, MPI_
                               sizeof(struct MPII_Ibcast_state), mpi_errno, "MPI_Status",
                               MPL_MEM_BUFFER);
     MPIR_Datatype_get_size_macro(datatype, type_size);
-    nbytes = type_size * count;
+    nbytes = (MPI_Aint)type_size * count;
     ibcast_state->n_bytes = nbytes;
     ibcast_state->curr_bytes = 0;
     if (is_contig) {
@@ -102,7 +103,8 @@ int MPIR_Ibcast_sched_intra_scatter_ring_allgather(void *buffer, int count, MPI_
     j = rank;
     jnext = left;
     for (i = 1; i < comm_size; i++) {
-        int left_count, right_count, left_disp, right_disp, rel_j, rel_jnext;
+        MPI_Aint left_count, right_count, left_disp, right_disp;
+        int rel_j, rel_jnext;
 
         rel_j = (j - root + comm_size) % comm_size;
         rel_jnext = (jnext - root + comm_size) % comm_size;
diff --git a/mpich2/src/mpi/coll/ibcast/ibcast_utils.c b/mpich2/src/mpi/coll/ibcast/ibcast_utils.c
index 9b9a4dca2..ba723911b 100644
--- a/mpich2/src/mpi/coll/ibcast/ibcast_utils.c
+++ b/mpich2/src/mpi/coll/ibcast/ibcast_utils.c
@@ -79,13 +79,13 @@ int MPII_Ibcast_sched_add_length(MPIR_Comm * comm, int tag, void *state)
 #define FUNCNAME MPII_Iscatter_for_bcast_sched
 #undef FCNAME
 #define FCNAME MPL_QUOTE(FUNCNAME)
-int MPII_Iscatter_for_bcast_sched(void *tmp_buf, int root, MPIR_Comm * comm_ptr, int nbytes,
+int MPII_Iscatter_for_bcast_sched(void *tmp_buf, int root, MPIR_Comm * comm_ptr, MPI_Aint nbytes,
                                   MPIR_Sched_t s)
 {
     int mpi_errno = MPI_SUCCESS;
     int rank, comm_size, src, dst;
     int relative_rank, mask;
-    int scatter_size, curr_size, recv_size, send_size;
+    MPI_Aint scatter_size, curr_size, recv_size, send_size;
 
     comm_size = comm_ptr->local_size;
     rank = comm_ptr->rank;
